
PASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008018  08008018  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008020  08008020  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bcc  20000060  08008088  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c2c  08008088  00020c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153a6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c3a  00000000  00000000  00035479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  000380b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d45  00000000  00000000  000391c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270ca  00000000  00000000  00039f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001667a  00000000  00000000  00060fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f14f9  00000000  00000000  00077649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d1c  00000000  00000000  00168b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0016d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007eb0 	.word	0x08007eb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007eb0 	.word	0x08007eb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <read_ADC_Channel>:
static void MX_USART3_UART_Init(void);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);



uint16_t read_ADC_Channel(ADC_HandleTypeDef* hadc, int channel) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef chConfig = { 0 };
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
	chConfig.Channel = channel;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	60bb      	str	r3, [r7, #8]
	chConfig.Rank = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
	chConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(hadc, &chConfig);
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	4619      	mov	r1, r3
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f001 fb9e 	bl	8001d28 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(hadc);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 fa35 	bl	8001a5c <HAL_ADC_Start>
	int status = HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 80005f2:	f04f 31ff 	mov.w	r1, #4294967295
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f001 fafe 	bl	8001bf8 <HAL_ADC_PollForConversion>
 80005fc:	4603      	mov	r3, r0
 80005fe:	61fb      	str	r3, [r7, #28]
		  if (status != HAL_OK) {
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <read_ADC_Channel+0x4e>
			Error_Handler();
 8000606:	f000 fde3 	bl	80011d0 <Error_Handler>
		  }
	uint16_t val = HAL_ADC_GetValue(hadc);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f001 fb7f 	bl	8001d0e <HAL_ADC_GetValue>
 8000610:	4603      	mov	r3, r0
 8000612:	837b      	strh	r3, [r7, #26]
//	HAL_ADC_Stop(hadc);

	return val;
 8000614:	8b7b      	ldrh	r3, [r7, #26]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

	static int circ_offset_low = 0;
	static int circ_offset_high = 0;


	if(hsai == &hsai_BlockB1) return;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a45      	ldr	r2, [pc, #276]	; (8000740 <HAL_SAI_TxCpltCallback+0x120>)
 800062c:	4293      	cmp	r3, r2
 800062e:	f000 8083 	beq.w	8000738 <HAL_SAI_TxCpltCallback+0x118>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000632:	b672      	cpsid	i
}
 8000634:	bf00      	nop

	__disable_irq();
	adc_get[0] = read_ADC_Channel(&hadc1, 0);
 8000636:	2100      	movs	r1, #0
 8000638:	4842      	ldr	r0, [pc, #264]	; (8000744 <HAL_SAI_TxCpltCallback+0x124>)
 800063a:	f7ff ffbf 	bl	80005bc <read_ADC_Channel>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b41      	ldr	r3, [pc, #260]	; (8000748 <HAL_SAI_TxCpltCallback+0x128>)
 8000644:	801a      	strh	r2, [r3, #0]
	adc_get[1] = read_ADC_Channel(&hadc1, 3);
 8000646:	2103      	movs	r1, #3
 8000648:	483e      	ldr	r0, [pc, #248]	; (8000744 <HAL_SAI_TxCpltCallback+0x124>)
 800064a:	f7ff ffb7 	bl	80005bc <read_ADC_Channel>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <HAL_SAI_TxCpltCallback+0x128>)
 8000654:	805a      	strh	r2, [r3, #2]
	delay = (read_ADC_Channel(&hadc1, 4) - 2000) * 7 / 2048;
 8000656:	2104      	movs	r1, #4
 8000658:	483a      	ldr	r0, [pc, #232]	; (8000744 <HAL_SAI_TxCpltCallback+0x124>)
 800065a:	f7ff ffaf 	bl	80005bc <read_ADC_Channel>
 800065e:	4603      	mov	r3, r0
 8000660:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8000664:	4613      	mov	r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	da01      	bge.n	8000672 <HAL_SAI_TxCpltCallback+0x52>
 800066e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000672:	12db      	asrs	r3, r3, #11
 8000674:	461a      	mov	r2, r3
 8000676:	4b35      	ldr	r3, [pc, #212]	; (800074c <HAL_SAI_TxCpltCallback+0x12c>)
 8000678:	601a      	str	r2, [r3, #0]



//	audio_buf_high[circ_offset_high] = (adc_get[0] << 4) - (1 << 15);
	audio_buf_low[circ_offset_low] = (adc_get[1] << 4) - (1 << 15);
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <HAL_SAI_TxCpltCallback+0x128>)
 800067c:	885b      	ldrh	r3, [r3, #2]
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b33      	ldr	r3, [pc, #204]	; (8000750 <HAL_SAI_TxCpltCallback+0x130>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800068a:	b291      	uxth	r1, r2
 800068c:	4a31      	ldr	r2, [pc, #196]	; (8000754 <HAL_SAI_TxCpltCallback+0x134>)
 800068e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	circ_offset_high = (circ_offset_high + 1) % AUDIO_HIGH_BUF_SIZE;
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <HAL_SAI_TxCpltCallback+0x138>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	4b30      	ldr	r3, [pc, #192]	; (800075c <HAL_SAI_TxCpltCallback+0x13c>)
 800069a:	fb83 1302 	smull	r1, r3, r3, r2
 800069e:	4413      	add	r3, r2
 80006a0:	10d9      	asrs	r1, r3, #3
 80006a2:	17d3      	asrs	r3, r2, #31
 80006a4:	1ac9      	subs	r1, r1, r3
 80006a6:	460b      	mov	r3, r1
 80006a8:	011b      	lsls	r3, r3, #4
 80006aa:	1a5b      	subs	r3, r3, r1
 80006ac:	1ad1      	subs	r1, r2, r3
 80006ae:	460b      	mov	r3, r1
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <HAL_SAI_TxCpltCallback+0x138>)
 80006ba:	601a      	str	r2, [r3, #0]
	circ_offset_low = (circ_offset_low + 1) % AUDIO_LOW_BUF_SIZE;
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <HAL_SAI_TxCpltCallback+0x130>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a27      	ldr	r2, [pc, #156]	; (8000760 <HAL_SAI_TxCpltCallback+0x140>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	441a      	add	r2, r3
 80006ca:	11d1      	asrs	r1, r2, #7
 80006cc:	17da      	asrs	r2, r3, #31
 80006ce:	1a8a      	subs	r2, r1, r2
 80006d0:	21b4      	movs	r1, #180	; 0xb4
 80006d2:	fb01 f202 	mul.w	r2, r1, r2
 80006d6:	1a9a      	subs	r2, r3, r2
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <HAL_SAI_TxCpltCallback+0x130>)
 80006da:	601a      	str	r2, [r3, #0]

	int buf_index;
	//Fill the 12 subwoofers
	for(int i = 0; i < 12; i ++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	e025      	b.n	800072e <HAL_SAI_TxCpltCallback+0x10e>
		buf_index = (delay * i + (AUDIO_LOW_BUF_SIZE >> 1) + circ_offset_low) % AUDIO_LOW_BUF_SIZE;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_SAI_TxCpltCallback+0x12c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <HAL_SAI_TxCpltCallback+0x130>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <HAL_SAI_TxCpltCallback+0x140>)
 80006f8:	fb82 1203 	smull	r1, r2, r2, r3
 80006fc:	441a      	add	r2, r3
 80006fe:	11d1      	asrs	r1, r2, #7
 8000700:	17da      	asrs	r2, r3, #31
 8000702:	1a8a      	subs	r2, r1, r2
 8000704:	21b4      	movs	r1, #180	; 0xb4
 8000706:	fb01 f202 	mul.w	r2, r1, r2
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	60bb      	str	r3, [r7, #8]
		buf_index = MAX(buf_index, 0);
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000714:	60bb      	str	r3, [r7, #8]
		sai_fifo_a[i] = audio_buf_low[buf_index];
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <HAL_SAI_TxCpltCallback+0x134>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071e:	4619      	mov	r1, r3
 8000720:	4a10      	ldr	r2, [pc, #64]	; (8000764 <HAL_SAI_TxCpltCallback+0x144>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 12; i ++) {
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b0b      	cmp	r3, #11
 8000732:	ddd6      	ble.n	80006e2 <HAL_SAI_TxCpltCallback+0xc2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000734:	b662      	cpsie	i
}
 8000736:	e000      	b.n	800073a <HAL_SAI_TxCpltCallback+0x11a>
	if(hsai == &hsai_BlockB1) return;
 8000738:	bf00      	nop
////	sprintf(msg1, "adc2 is %d\r\n", adc_get[1]);
////	HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY);
////	HAL_UART_Transmit(&huart3, msg1, strlen((char*)msg1), HAL_MAX_DELAY);


}
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000019c 	.word	0x2000019c
 8000744:	2000007c 	.word	0x2000007c
 8000748:	20000870 	.word	0x20000870
 800074c:	20000a5c 	.word	0x20000a5c
 8000750:	20000ad0 	.word	0x20000ad0
 8000754:	200008f4 	.word	0x200008f4
 8000758:	20000ad4 	.word	0x20000ad4
 800075c:	88888889 	.word	0x88888889
 8000760:	b60b60b7 	.word	0xb60b60b7
 8000764:	20000874 	.word	0x20000874

08000768 <write_DAC1>:
uint8_t dac_ctrl1 = 0b10000100;
uint8_t dac_ctrl2 = 0b10000;



void write_DAC1(uint8_t reg, uint8_t* data) {
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b0ba      	sub	sp, #232	; 0xe8
 800076c:	af04      	add	r7, sp, #16
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC1_ADDR << 1, reg,
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	b29a      	uxth	r2, r3
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	2108      	movs	r1, #8
 800078a:	4827      	ldr	r0, [pc, #156]	; (8000828 <write_DAC1+0xc0>)
 800078c:	f002 fca8 	bl	80030e0 <HAL_I2C_Mem_Write>
 8000790:	4603      	mov	r3, r0
 8000792:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success on DAC1!\r\n";
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <write_DAC1+0xc4>)
 8000798:	f107 040c 	add.w	r4, r7, #12
 800079c:	461d      	mov	r5, r3
 800079e:	6828      	ldr	r0, [r5, #0]
 80007a0:	6869      	ldr	r1, [r5, #4]
 80007a2:	68aa      	ldr	r2, [r5, #8]
 80007a4:	68eb      	ldr	r3, [r5, #12]
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	8a2b      	ldrh	r3, [r5, #16]
 80007aa:	7caa      	ldrb	r2, [r5, #18]
 80007ac:	8023      	strh	r3, [r4, #0]
 80007ae:	4613      	mov	r3, r2
 80007b0:	70a3      	strb	r3, [r4, #2]
 80007b2:	f107 031f 	add.w	r3, r7, #31
 80007b6:	2251      	movs	r2, #81	; 0x51
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f006 fef4 	bl	80075a8 <memset>
	if (ret != HAL_OK) {
 80007c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d01d      	beq.n	8000804 <write_DAC1+0x9c>
		sprintf(str_fail, "Error is %d on DAC1; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 80007c8:	4817      	ldr	r0, [pc, #92]	; (8000828 <write_DAC1+0xc0>)
 80007ca:	f002 fd9d 	bl	8003308 <HAL_I2C_GetError>
 80007ce:	4601      	mov	r1, r0
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	4613      	mov	r3, r2
 80007de:	460a      	mov	r2, r1
 80007e0:	4913      	ldr	r1, [pc, #76]	; (8000830 <write_DAC1+0xc8>)
 80007e2:	f006 fec1 	bl	8007568 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 80007e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fd10 	bl	8000210 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <write_DAC1+0xcc>)
 80007fe:	f005 f931 	bl	8005a64 <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 8000802:	e00d      	b.n	8000820 <write_DAC1+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd01 	bl	8000210 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	f107 010c 	add.w	r1, r7, #12
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <write_DAC1+0xcc>)
 800081c:	f005 f922 	bl	8005a64 <HAL_UART_Transmit>
}
 8000820:	bf00      	nop
 8000822:	37d8      	adds	r7, #216	; 0xd8
 8000824:	46bd      	mov	sp, r7
 8000826:	bdb0      	pop	{r4, r5, r7, pc}
 8000828:	200000c4 	.word	0x200000c4
 800082c:	08007efc 	.word	0x08007efc
 8000830:	08007ec8 	.word	0x08007ec8
 8000834:	200002e0 	.word	0x200002e0

08000838 <write_DAC2>:

void write_DAC2(uint8_t reg, uint8_t* data) {
 8000838:	b5b0      	push	{r4, r5, r7, lr}
 800083a:	b0ba      	sub	sp, #232	; 0xe8
 800083c:	af04      	add	r7, sp, #16
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c2, DAC2_ADDR << 1, reg,
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	9302      	str	r3, [sp, #8]
 800084e:	2301      	movs	r3, #1
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	2148      	movs	r1, #72	; 0x48
 800085a:	4827      	ldr	r0, [pc, #156]	; (80008f8 <write_DAC2+0xc0>)
 800085c:	f002 fc40 	bl	80030e0 <HAL_I2C_Mem_Write>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            1, data, 1, HAL_MAX_DELAY);
	char str_fail[100];
	char str_success[100] = "Success occured!\r\n";
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <write_DAC2+0xc4>)
 8000868:	f107 040c 	add.w	r4, r7, #12
 800086c:	461d      	mov	r5, r3
 800086e:	6828      	ldr	r0, [r5, #0]
 8000870:	6869      	ldr	r1, [r5, #4]
 8000872:	68aa      	ldr	r2, [r5, #8]
 8000874:	68eb      	ldr	r3, [r5, #12]
 8000876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000878:	8a2b      	ldrh	r3, [r5, #16]
 800087a:	7caa      	ldrb	r2, [r5, #18]
 800087c:	8023      	strh	r3, [r4, #0]
 800087e:	4613      	mov	r3, r2
 8000880:	70a3      	strb	r3, [r4, #2]
 8000882:	f107 031f 	add.w	r3, r7, #31
 8000886:	2251      	movs	r2, #81	; 0x51
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f006 fe8c 	bl	80075a8 <memset>
	if (ret != HAL_OK) {
 8000890:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000894:	2b00      	cmp	r3, #0
 8000896:	d01d      	beq.n	80008d4 <write_DAC2+0x9c>
		sprintf(str_fail, "Error is %d on DAC2; Register=0x%02X, Data=0x%02x\r\n", HAL_I2C_GetError(&hi2c2), reg, *data);
 8000898:	4817      	ldr	r0, [pc, #92]	; (80008f8 <write_DAC2+0xc0>)
 800089a:	f002 fd35 	bl	8003308 <HAL_I2C_GetError>
 800089e:	4601      	mov	r1, r0
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4613      	mov	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	4913      	ldr	r1, [pc, #76]	; (8000900 <write_DAC2+0xc8>)
 80008b2:	f006 fe59 	bl	8007568 <siprintf>
		HAL_UART_Transmit(&huart3, str_fail, strlen((char*)str_fail), HAL_MAX_DELAY);
 80008b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fca8 	bl	8000210 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <write_DAC2+0xcc>)
 80008ce:	f005 f8c9 	bl	8005a64 <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
	}
}
 80008d2:	e00d      	b.n	80008f0 <write_DAC2+0xb8>
		HAL_UART_Transmit(&huart3, str_success, strlen((char*)str_success), HAL_MAX_DELAY);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fc99 	bl	8000210 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f107 010c 	add.w	r1, r7, #12
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <write_DAC2+0xcc>)
 80008ec:	f005 f8ba 	bl	8005a64 <HAL_UART_Transmit>
}
 80008f0:	bf00      	nop
 80008f2:	37d8      	adds	r7, #216	; 0xd8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bdb0      	pop	{r4, r5, r7, pc}
 80008f8:	200000c4 	.word	0x200000c4
 80008fc:	08007f44 	.word	0x08007f44
 8000900:	08007f10 	.word	0x08007f10
 8000904:	200002e0 	.word	0x200002e0

08000908 <HAL_UART_RxCpltCallback>:


// UART INTERRUPT SERIAL COM
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b0a0      	sub	sp, #128	; 0x80
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

	        // Re-enable the UART receive interrupt
	        //HAL_UART_Receive_IT(&huart3, (uint8_t *)&uart3_rx_byte, 1);
	    //}

    if (huart->Instance == USART3)  // Check which UART generated the interrupt (3)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <HAL_UART_RxCpltCallback+0xbc>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d14f      	bne.n	80009ba <HAL_UART_RxCpltCallback+0xb2>
    {
        // Append the received character to the buffer, if it's not the newline
        // Also check if we haven't exceeded our buffer size (100 for now)
        if (receivedData != '\n' && commandLength < MAX_COMMAND_LENGTH - 1)
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <HAL_UART_RxCpltCallback+0xc0>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b0a      	cmp	r3, #10
 8000922:	d00e      	beq.n	8000942 <HAL_UART_RxCpltCallback+0x3a>
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <HAL_UART_RxCpltCallback+0xc4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b62      	cmp	r3, #98	; 0x62
 800092a:	dc0a      	bgt.n	8000942 <HAL_UART_RxCpltCallback+0x3a>
        {
            commandBuffer[commandLength++] = receivedData;
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_UART_RxCpltCallback+0xc4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	4926      	ldr	r1, [pc, #152]	; (80009cc <HAL_UART_RxCpltCallback+0xc4>)
 8000934:	600a      	str	r2, [r1, #0]
 8000936:	4a24      	ldr	r2, [pc, #144]	; (80009c8 <HAL_UART_RxCpltCallback+0xc0>)
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	b2d1      	uxtb	r1, r2
 800093c:	4a24      	ldr	r2, [pc, #144]	; (80009d0 <HAL_UART_RxCpltCallback+0xc8>)
 800093e:	54d1      	strb	r1, [r2, r3]
 8000940:	e036      	b.n	80009b0 <HAL_UART_RxCpltCallback+0xa8>
        }
        else if (receivedData == '\n')  // Received a newline character
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <HAL_UART_RxCpltCallback+0xc0>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b0a      	cmp	r3, #10
 800094a:	d131      	bne.n	80009b0 <HAL_UART_RxCpltCallback+0xa8>
        {
            // Ensure the string is null-terminated
            commandBuffer[commandLength] = '\0';
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_UART_RxCpltCallback+0xc4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <HAL_UART_RxCpltCallback+0xc8>)
 8000952:	2100      	movs	r1, #0
 8000954:	54d1      	strb	r1, [r2, r3]

            if (commandLength > 0) {  // Check if there's something to process
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <HAL_UART_RxCpltCallback+0xc4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	dd20      	ble.n	80009a0 <HAL_UART_RxCpltCallback+0x98>

            	// Test print
                char response[MAX_COMMAND_LENGTH + 20];  // Allocate enough space for response message
                sprintf(response, "Received command: %s\n", commandBuffer);
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <HAL_UART_RxCpltCallback+0xc8>)
 8000964:	491b      	ldr	r1, [pc, #108]	; (80009d4 <HAL_UART_RxCpltCallback+0xcc>)
 8000966:	4618      	mov	r0, r3
 8000968:	f006 fdfe 	bl	8007568 <siprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fc4d 	bl	8000210 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	b29a      	uxth	r2, r3
 800097a:	f107 0108 	add.w	r1, r7, #8
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <HAL_UART_RxCpltCallback+0xd0>)
 8000984:	f005 f86e 	bl	8005a64 <HAL_UART_Transmit>

                // // // PROCESS COMMAND HERE // // //

                if (commandBuffer[0] == 'T' && commandLength == 1){
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_UART_RxCpltCallback+0xc8>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b54      	cmp	r3, #84	; 0x54
 800098e:	d107      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x98>
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_UART_RxCpltCallback+0xc4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d103      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x98>
                    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	4810      	ldr	r0, [pc, #64]	; (80009dc <HAL_UART_RxCpltCallback+0xd4>)
 800099c:	f002 faf5 	bl	8002f8a <HAL_GPIO_TogglePin>


            }

            // Reset the buffer and counter for the next command
            memset(commandBuffer, 0, MAX_COMMAND_LENGTH);
 80009a0:	2264      	movs	r2, #100	; 0x64
 80009a2:	2100      	movs	r1, #0
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <HAL_UART_RxCpltCallback+0xc8>)
 80009a6:	f006 fdff 	bl	80075a8 <memset>
            commandLength = 0;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_UART_RxCpltCallback+0xc4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
        }

        // Prepare to receive the next character regardless
        HAL_UART_Receive_IT(&huart3, (uint8_t*)&receivedData, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	4905      	ldr	r1, [pc, #20]	; (80009c8 <HAL_UART_RxCpltCallback+0xc0>)
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <HAL_UART_RxCpltCallback+0xd0>)
 80009b6:	f005 f8d8 	bl	8005b6a <HAL_UART_Receive_IT>
    }
}
 80009ba:	bf00      	nop
 80009bc:	3780      	adds	r7, #128	; 0x80
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004800 	.word	0x40004800
 80009c8:	20000a60 	.word	0x20000a60
 80009cc:	20000ac8 	.word	0x20000ac8
 80009d0:	20000a64 	.word	0x20000a64
 80009d4:	08007f58 	.word	0x08007f58
 80009d8:	200002e0 	.word	0x200002e0
 80009dc:	40020400 	.word	0x40020400

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f000 ff74 	bl	80018d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f8b3 	bl	8000b54 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009ee:	f000 f919 	bl	8000c24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f000 fb25 	bl	8001040 <MX_GPIO_Init>
  MX_DMA_Init();
 80009f6:	f000 fafd 	bl	8000ff4 <MX_DMA_Init>
  MX_SAI1_Init();
 80009fa:	f000 f9e9 	bl	8000dd0 <MX_SAI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009fe:	f000 facb 	bl	8000f98 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000a02:	f000 f9a5 	bl	8000d50 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000a06:	f000 fa97 	bl	8000f38 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000a0a:	f000 f933 	bl	8000c74 <MX_ADC1_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t *)&uart3_rx_byte, 1);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4940      	ldr	r1, [pc, #256]	; (8000b14 <main+0x134>)
 8000a12:	4841      	ldr	r0, [pc, #260]	; (8000b18 <main+0x138>)
 8000a14:	f005 f8a9 	bl	8005b6a <HAL_UART_Receive_IT>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __disable_irq();
//  HAL_ADC_Start_DMA(&hadc1, &adc_get, 2);
  sai_fifo_a[0] = 0x7000U;
 8000a1c:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <main+0x13c>)
 8000a1e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000a22:	601a      	str	r2, [r3, #0]
  sai_fifo_b[0] = 0x7000U;
 8000a24:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <main+0x140>)
 8000a26:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000a2a:	601a      	str	r2, [r3, #0]
  int error;
  error = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint32_t * )&sai_fifo_a, 16);
 8000a2c:	2210      	movs	r2, #16
 8000a2e:	493b      	ldr	r1, [pc, #236]	; (8000b1c <main+0x13c>)
 8000a30:	483c      	ldr	r0, [pc, #240]	; (8000b24 <main+0x144>)
 8000a32:	f004 fca7 	bl	8005384 <HAL_SAI_Transmit_DMA>
 8000a36:	4603      	mov	r3, r0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  char error_msg[50];
  sprintf(error_msg, "Error is %d on DMA1\r\n", error);
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a3e:	493a      	ldr	r1, [pc, #232]	; (8000b28 <main+0x148>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f006 fd91 	bl	8007568 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000a46:	463b      	mov	r3, r7
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbe1 	bl	8000210 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4639      	mov	r1, r7
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	482f      	ldr	r0, [pc, #188]	; (8000b18 <main+0x138>)
 8000a5a:	f005 f803 	bl	8005a64 <HAL_UART_Transmit>

  error = HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint32_t * )&sai_fifo_b, 16);
 8000a5e:	2210      	movs	r2, #16
 8000a60:	492f      	ldr	r1, [pc, #188]	; (8000b20 <main+0x140>)
 8000a62:	4832      	ldr	r0, [pc, #200]	; (8000b2c <main+0x14c>)
 8000a64:	f004 fc8e 	bl	8005384 <HAL_SAI_Transmit_DMA>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  sprintf(error_msg, "Error is %d on DMA2\r\n", error);
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a70:	492f      	ldr	r1, [pc, #188]	; (8000b30 <main+0x150>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 fd78 	bl	8007568 <siprintf>
  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fbc8 	bl	8000210 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4639      	mov	r1, r7
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	4823      	ldr	r0, [pc, #140]	; (8000b18 <main+0x138>)
 8000a8c:	f004 ffea 	bl	8005a64 <HAL_UART_Transmit>

  //HAL_Delay(1000);

  sprintf(error_msg, "UART good!\r\n");
 8000a90:	463b      	mov	r3, r7
 8000a92:	4928      	ldr	r1, [pc, #160]	; (8000b34 <main+0x154>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	f006 fd67 	bl	8007568 <siprintf>

  HAL_UART_Transmit(&huart3, error_msg, strlen((char*)error_msg), HAL_MAX_DELAY);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fbb7 	bl	8000210 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	481a      	ldr	r0, [pc, #104]	; (8000b18 <main+0x138>)
 8000aae:	f004 ffd9 	bl	8005a64 <HAL_UART_Transmit>

  write_DAC1(PLL_CLK_CTRL0, &pll_clk_data);
 8000ab2:	4921      	ldr	r1, [pc, #132]	; (8000b38 <main+0x158>)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fe57 	bl	8000768 <write_DAC1>
  write_DAC1(DAC_MUTE1, &mute_data_DAC1);
 8000aba:	4920      	ldr	r1, [pc, #128]	; (8000b3c <main+0x15c>)
 8000abc:	2009      	movs	r0, #9
 8000abe:	f7ff fe53 	bl	8000768 <write_DAC1>
  write_DAC1(DAC_CTRL0, &dac_ctrl0);
 8000ac2:	491f      	ldr	r1, [pc, #124]	; (8000b40 <main+0x160>)
 8000ac4:	2006      	movs	r0, #6
 8000ac6:	f7ff fe4f 	bl	8000768 <write_DAC1>
  write_DAC1(DAC_CTRL1, &dac_ctrl1);
 8000aca:	491e      	ldr	r1, [pc, #120]	; (8000b44 <main+0x164>)
 8000acc:	2007      	movs	r0, #7
 8000ace:	f7ff fe4b 	bl	8000768 <write_DAC1>
  write_DAC1(DAC_CTRL2, &dac_ctrl2);
 8000ad2:	491d      	ldr	r1, [pc, #116]	; (8000b48 <main+0x168>)
 8000ad4:	2008      	movs	r0, #8
 8000ad6:	f7ff fe47 	bl	8000768 <write_DAC1>

  write_DAC2(PLL_CLK_CTRL0, &pll_clk_data);
 8000ada:	4917      	ldr	r1, [pc, #92]	; (8000b38 <main+0x158>)
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff feab 	bl	8000838 <write_DAC2>
  write_DAC2(DAC_MUTE1, &mute_data_DAC2);
 8000ae2:	491a      	ldr	r1, [pc, #104]	; (8000b4c <main+0x16c>)
 8000ae4:	2009      	movs	r0, #9
 8000ae6:	f7ff fea7 	bl	8000838 <write_DAC2>
  write_DAC2(DAC_CTRL0, &dac_ctrl0);
 8000aea:	4915      	ldr	r1, [pc, #84]	; (8000b40 <main+0x160>)
 8000aec:	2006      	movs	r0, #6
 8000aee:	f7ff fea3 	bl	8000838 <write_DAC2>
  write_DAC2(DAC_CTRL1, &dac_ctrl1);
 8000af2:	4914      	ldr	r1, [pc, #80]	; (8000b44 <main+0x164>)
 8000af4:	2007      	movs	r0, #7
 8000af6:	f7ff fe9f 	bl	8000838 <write_DAC2>
  write_DAC2(DAC_CTRL2, &dac_ctrl2);
 8000afa:	4913      	ldr	r1, [pc, #76]	; (8000b48 <main+0x168>)
 8000afc:	2008      	movs	r0, #8
 8000afe:	f7ff fe9b 	bl	8000838 <write_DAC2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b02:	b662      	cpsie	i
}
 8000b04:	bf00      	nop

  __enable_irq();

  // Start reception with interrupt
  HAL_UART_Receive_IT(&huart3, &receivedData, 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	4911      	ldr	r1, [pc, #68]	; (8000b50 <main+0x170>)
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <main+0x138>)
 8000b0c:	f005 f82d 	bl	8005b6a <HAL_UART_Receive_IT>
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <main+0x130>
 8000b12:	bf00      	nop
 8000b14:	20000acc 	.word	0x20000acc
 8000b18:	200002e0 	.word	0x200002e0
 8000b1c:	20000874 	.word	0x20000874
 8000b20:	200008b4 	.word	0x200008b4
 8000b24:	20000118 	.word	0x20000118
 8000b28:	08007f70 	.word	0x08007f70
 8000b2c:	2000019c 	.word	0x2000019c
 8000b30:	08007f88 	.word	0x08007f88
 8000b34:	08007fa0 	.word	0x08007fa0
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000acd 	.word	0x20000acd
 8000b40:	20000001 	.word	0x20000001
 8000b44:	20000002 	.word	0x20000002
 8000b48:	20000003 	.word	0x20000003
 8000b4c:	20000ace 	.word	0x20000ace
 8000b50:	20000a60 	.word	0x20000a60

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	; 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f006 fd20 	bl	80075a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b78:	f002 fff8 	bl	8003b6c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <SystemClock_Config+0xc8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b9c:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <SystemClock_Config+0xcc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bc8:	2348      	movs	r3, #72	; 0x48
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 ffd7 	bl	8003b8c <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000be4:	f000 faf4 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2102      	movs	r1, #2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fa65 	bl	80040d4 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c10:	f000 fade 	bl	80011d0 <Error_Handler>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3750      	adds	r7, #80	; 0x50
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0a2      	sub	sp, #136	; 0x88
 8000c28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2284      	movs	r2, #132	; 0x84
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f006 fcb9 	bl	80075a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 8000c36:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000c3a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000c3c:	2332      	movs	r3, #50	; 0x32
 8000c3e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fc60 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 8000c66:	f000 fab3 	bl	80011d0 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3788      	adds	r7, #136	; 0x88
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c88:	4a2f      	ldr	r2, [pc, #188]	; (8000d48 <MX_ADC1_Init+0xd4>)
 8000c8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cb4:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <MX_ADC1_Init+0xd8>)
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd2:	481c      	ldr	r0, [pc, #112]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cd4:	f000 fe7e 	bl	80019d4 <HAL_ADC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 fa77 	bl	80011d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cf4:	f001 f818 	bl	8001d28 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cfe:	f000 fa67 	bl	80011d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d02:	2303      	movs	r3, #3
 8000d04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000d10:	f001 f80a 	bl	8001d28 <HAL_ADC_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000d1a:	f000 fa59 	bl	80011d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d22:	2303      	movs	r3, #3
 8000d24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000d2c:	f000 fffc 	bl	8001d28 <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000d36:	f000 fa4b 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000007c 	.word	0x2000007c
 8000d48:	40012000 	.word	0x40012000
 8000d4c:	0f000001 	.word	0x0f000001

08000d50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <MX_I2C2_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x601015E9;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <MX_I2C2_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d8c:	f002 f918 	bl	8002fc0 <HAL_I2C_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 fa1b 	bl	80011d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000d9e:	f002 fd05 	bl	80037ac <HAL_I2CEx_ConfigAnalogFilter>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 fa12 	bl	80011d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_I2C2_Init+0x74>)
 8000db0:	f002 fd47 	bl	8003842 <HAL_I2CEx_ConfigDigitalFilter>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 fa09 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000c4 	.word	0x200000c4
 8000dc8:	40005800 	.word	0x40005800
 8000dcc:	601015e9 	.word	0x601015e9

08000dd0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000dd4:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000dd6:	4a55      	ldr	r2, [pc, #340]	; (8000f2c <MX_SAI1_Init+0x15c>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000de0:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000de6:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dec:	4b4e      	ldr	r3, [pc, #312]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000df2:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000df8:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dfe:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e04:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.Mckdiv = 7;
 8000e16:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e1c:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e22:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000e34:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000e42:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e48:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e50:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e58:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e5a:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 16;
 8000e66:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e68:	2210      	movs	r2, #16
 8000e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e72:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e74:	482c      	ldr	r0, [pc, #176]	; (8000f28 <MX_SAI1_Init+0x158>)
 8000e76:	f004 f883 	bl	8004f80 <HAL_SAI_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_SAI1_Init+0xb4>
  {
    Error_Handler();
 8000e80:	f000 f9a6 	bl	80011d0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000e86:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <MX_SAI1_Init+0x164>)
 8000e88:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 256;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000eea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eee:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000ef2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ef6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 16;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000f06:	2210      	movs	r2, #16
 8000f08:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f10:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <MX_SAI1_Init+0x160>)
 8000f14:	f004 f834 	bl	8004f80 <HAL_SAI_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_SAI1_Init+0x152>
  {
    Error_Handler();
 8000f1e:	f000 f957 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  /* USER CODE END SAI1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000118 	.word	0x20000118
 8000f2c:	40015804 	.word	0x40015804
 8000f30:	2000019c 	.word	0x2000019c
 8000f34:	40015824 	.word	0x40015824

08000f38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_USART3_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f7c:	f004 fd24 	bl	80059c8 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f000 f923 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200002e0 	.word	0x200002e0
 8000f94:	40004800 	.word	0x40004800

08000f98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa6:	2206      	movs	r2, #6
 8000fa8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fdc:	f002 fc7d 	bl	80038da <HAL_PCD_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 f8f3 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000368 	.word	0x20000368

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_DMA_Init+0x48>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <MX_DMA_Init+0x48>)
 8001000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <MX_DMA_Init+0x48>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2039      	movs	r0, #57	; 0x39
 8001018:	f001 f9b1 	bl	800237e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800101c:	2039      	movs	r0, #57	; 0x39
 800101e:	f001 f9ca 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	203c      	movs	r0, #60	; 0x3c
 8001028:	f001 f9a9 	bl	800237e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800102c:	203c      	movs	r0, #60	; 0x3c
 800102e:	f001 f9c2 	bl	80023b6 <HAL_NVIC_EnableIRQ>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001056:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a5a      	ldr	r2, [pc, #360]	; (80011c4 <MX_GPIO_Init+0x184>)
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b55      	ldr	r3, [pc, #340]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <MX_GPIO_Init+0x184>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001086:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a4e      	ldr	r2, [pc, #312]	; (80011c4 <MX_GPIO_Init+0x184>)
 800108c:	f043 0320 	orr.w	r3, r3, #32
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a42      	ldr	r2, [pc, #264]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a3c      	ldr	r2, [pc, #240]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a36      	ldr	r2, [pc, #216]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <MX_GPIO_Init+0x184>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <MX_GPIO_Init+0x184>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800111c:	482a      	ldr	r0, [pc, #168]	; (80011c8 <MX_GPIO_Init+0x188>)
 800111e:	f001 ff1b 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	4829      	ldr	r0, [pc, #164]	; (80011cc <MX_GPIO_Init+0x18c>)
 8001128:	f001 ff16 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113e:	230b      	movs	r3, #11
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	481f      	ldr	r0, [pc, #124]	; (80011c8 <MX_GPIO_Init+0x188>)
 800114a:	f001 fd59 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800114e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001154:	2311      	movs	r3, #17
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	4818      	ldr	r0, [pc, #96]	; (80011c8 <MX_GPIO_Init+0x188>)
 8001168:	f001 fd4a 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <MX_GPIO_Init+0x18c>)
 8001184:	f001 fd3c 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <MX_GPIO_Init+0x18c>)
 800119c:	f001 fd30 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_GPIO_Init+0x188>)
 80011b8:	f001 fd22 	bl	8002c00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011bc:	bf00      	nop
 80011be:	3738      	adds	r7, #56	; 0x38
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40021800 	.word	0x40021800

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b09a      	sub	sp, #104	; 0x68
 80011d4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d6:	b672      	cpsid	i
}
 80011d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char str[100] = "Error handler!\r\n";
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <Error_Handler+0x48>)
 80011dc:	1d3c      	adds	r4, r7, #4
 80011de:	461d      	mov	r5, r3
 80011e0:	6828      	ldr	r0, [r5, #0]
 80011e2:	6869      	ldr	r1, [r5, #4]
 80011e4:	68aa      	ldr	r2, [r5, #8]
 80011e6:	68eb      	ldr	r3, [r5, #12]
 80011e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ea:	7c2b      	ldrb	r3, [r5, #16]
 80011ec:	7023      	strb	r3, [r4, #0]
 80011ee:	f107 0315 	add.w	r3, r7, #21
 80011f2:	2253      	movs	r2, #83	; 0x53
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 f9d6 	bl	80075a8 <memset>
  HAL_UART_Transmit(&huart3, str, strlen((char*)str), HAL_MAX_DELAY);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f806 	bl	8000210 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	1d39      	adds	r1, r7, #4
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <Error_Handler+0x4c>)
 8001210:	f004 fc28 	bl	8005a64 <HAL_UART_Transmit>

  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x44>
 8001216:	bf00      	nop
 8001218:	08007fb0 	.word	0x08007fb0
 800121c:	200002e0 	.word	0x200002e0

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_MspInit+0x44>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_MspInit+0x44>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_MspInit+0x44>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x44>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x44>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x44>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_ADC_MspInit+0x74>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d123      	bne.n	80012d2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_ADC_MspInit+0x78>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80012ba:	2319      	movs	r3, #25
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012be:	2303      	movs	r3, #3
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_ADC_MspInit+0x7c>)
 80012ce:	f001 fc97 	bl	8002c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40012000 	.word	0x40012000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0aa      	sub	sp, #168	; 0xa8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2284      	movs	r2, #132	; 0x84
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f006 f94d 	bl	80075a8 <memset>
  if(hi2c->Instance==I2C2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <HAL_I2C_MspInit+0xb0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d13b      	bne.n	8001390 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800131e:	2300      	movs	r3, #0
 8001320:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4618      	mov	r0, r3
 8001328:	f003 f8fa 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001332:	f7ff ff4d 	bl	80011d0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_I2C_MspInit+0xb4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_I2C_MspInit+0xb4>)
 800133c:	f043 0320 	orr.w	r3, r3, #32
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_I2C_MspInit+0xb4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800134e:	2303      	movs	r3, #3
 8001350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001366:	2304      	movs	r3, #4
 8001368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800136c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001370:	4619      	mov	r1, r3
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <HAL_I2C_MspInit+0xb8>)
 8001374:	f001 fc44 	bl	8002c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_I2C_MspInit+0xb4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_I2C_MspInit+0xb4>)
 800137e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_I2C_MspInit+0xb4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	37a8      	adds	r7, #168	; 0xa8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40005800 	.word	0x40005800
 800139c:	40023800 	.word	0x40023800
 80013a0:	40021400 	.word	0x40021400

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0aa      	sub	sp, #168	; 0xa8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2284      	movs	r2, #132	; 0x84
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 f8ef 	bl	80075a8 <memset>
  if(huart->Instance==USART3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_UART_MspInit+0xc4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d144      	bne.n	800145e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013da:	2300      	movs	r3, #0
 80013dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 f89c 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ee:	f7ff feef 	bl	80011d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <HAL_UART_MspInit+0xc8>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_UART_MspInit+0xc8>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_UART_MspInit+0xc8>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_UART_MspInit+0xc8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <HAL_UART_MspInit+0xc8>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_UART_MspInit+0xc8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001422:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800143c:	2307      	movs	r3, #7
 800143e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001446:	4619      	mov	r1, r3
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <HAL_UART_MspInit+0xcc>)
 800144a:	f001 fbd9 	bl	8002c00 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2027      	movs	r0, #39	; 0x27
 8001454:	f000 ff93 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001458:	2027      	movs	r0, #39	; 0x27
 800145a:	f000 ffac 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	37a8      	adds	r7, #168	; 0xa8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004800 	.word	0x40004800
 800146c:	40023800 	.word	0x40023800
 8001470:	40020c00 	.word	0x40020c00

08001474 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0ac      	sub	sp, #176	; 0xb0
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	2284      	movs	r2, #132	; 0x84
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f006 f887 	bl	80075a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a2:	d159      	bne.n	8001558 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 f833 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80014c0:	f7ff fe86 	bl	80011d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_PCD_MspInit+0xec>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <HAL_PCD_MspInit+0xec>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_PCD_MspInit+0xec>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014dc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014f6:	230a      	movs	r3, #10
 80014f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001500:	4619      	mov	r1, r3
 8001502:	4818      	ldr	r0, [pc, #96]	; (8001564 <HAL_PCD_MspInit+0xf0>)
 8001504:	f001 fb7c 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001520:	4619      	mov	r1, r3
 8001522:	4810      	ldr	r0, [pc, #64]	; (8001564 <HAL_PCD_MspInit+0xf0>)
 8001524:	f001 fb6c 	bl	8002c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_PCD_MspInit+0xec>)
 800152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152c:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_PCD_MspInit+0xec>)
 800152e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001532:	6353      	str	r3, [r2, #52]	; 0x34
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_PCD_MspInit+0xec>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <HAL_PCD_MspInit+0xec>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_PCD_MspInit+0xec>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154a:	6453      	str	r3, [r2, #68]	; 0x44
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_PCD_MspInit+0xec>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	37b0      	adds	r7, #176	; 0xb0
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a6a      	ldr	r2, [pc, #424]	; (8001720 <HAL_SAI_MspInit+0x1b8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d163      	bne.n	8001642 <HAL_SAI_MspInit+0xda>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800157a:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <HAL_SAI_MspInit+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d113      	bne.n	80015aa <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001582:	4b69      	ldr	r3, [pc, #420]	; (8001728 <HAL_SAI_MspInit+0x1c0>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a68      	ldr	r2, [pc, #416]	; (8001728 <HAL_SAI_MspInit+0x1c0>)
 8001588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_SAI_MspInit+0x1c0>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2057      	movs	r0, #87	; 0x57
 80015a0:	f000 feed 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80015a4:	2057      	movs	r0, #87	; 0x57
 80015a6:	f000 ff06 	bl	80023b6 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 80015aa:	4b5e      	ldr	r3, [pc, #376]	; (8001724 <HAL_SAI_MspInit+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a5c      	ldr	r2, [pc, #368]	; (8001724 <HAL_SAI_MspInit+0x1bc>)
 80015b2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015b4:	2370      	movs	r3, #112	; 0x70
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015c4:	2306      	movs	r3, #6
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4857      	ldr	r0, [pc, #348]	; (800172c <HAL_SAI_MspInit+0x1c4>)
 80015d0:	f001 fb16 	bl	8002c00 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80015d4:	4b56      	ldr	r3, [pc, #344]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 80015d6:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_SAI_MspInit+0x1cc>)
 80015d8:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80015da:	4b55      	ldr	r3, [pc, #340]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 80015e2:	2240      	movs	r2, #64	; 0x40
 80015e4:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e6:	4b52      	ldr	r3, [pc, #328]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 80015ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015f4:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 80015f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fa:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001602:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 8001606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160a:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800160c:	4b48      	ldr	r3, [pc, #288]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 800160e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001612:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800161a:	4845      	ldr	r0, [pc, #276]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 800161c:	f000 fee6 	bl	80023ec <HAL_DMA_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_SAI_MspInit+0xc2>
    {
      Error_Handler();
 8001626:	f7ff fdd3 	bl	80011d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a40      	ldr	r2, [pc, #256]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 800162e:	671a      	str	r2, [r3, #112]	; 0x70
 8001630:	4a3f      	ldr	r2, [pc, #252]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a3d      	ldr	r2, [pc, #244]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 800163a:	66da      	str	r2, [r3, #108]	; 0x6c
 800163c:	4a3c      	ldr	r2, [pc, #240]	; (8001730 <HAL_SAI_MspInit+0x1c8>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a3c      	ldr	r2, [pc, #240]	; (8001738 <HAL_SAI_MspInit+0x1d0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d164      	bne.n	8001716 <HAL_SAI_MspInit+0x1ae>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800164c:	4b35      	ldr	r3, [pc, #212]	; (8001724 <HAL_SAI_MspInit+0x1bc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d113      	bne.n	800167c <HAL_SAI_MspInit+0x114>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001654:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HAL_SAI_MspInit+0x1c0>)
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	4a33      	ldr	r2, [pc, #204]	; (8001728 <HAL_SAI_MspInit+0x1c0>)
 800165a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800165e:	6453      	str	r3, [r2, #68]	; 0x44
 8001660:	4b31      	ldr	r3, [pc, #196]	; (8001728 <HAL_SAI_MspInit+0x1c0>)
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	2057      	movs	r0, #87	; 0x57
 8001672:	f000 fe84 	bl	800237e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001676:	2057      	movs	r0, #87	; 0x57
 8001678:	f000 fe9d 	bl	80023b6 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_SAI_MspInit+0x1bc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	4a28      	ldr	r2, [pc, #160]	; (8001724 <HAL_SAI_MspInit+0x1bc>)
 8001684:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001686:	2308      	movs	r3, #8
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001696:	2306      	movs	r3, #6
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4822      	ldr	r0, [pc, #136]	; (800172c <HAL_SAI_MspInit+0x1c4>)
 80016a2:	f001 faad 	bl	8002c00 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016a8:	4a25      	ldr	r2, [pc, #148]	; (8001740 <HAL_SAI_MspInit+0x1d8>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016b2:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c6:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016ce:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016de:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016e6:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80016ee:	4813      	ldr	r0, [pc, #76]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 80016f0:	f000 fe7c 	bl	80023ec <HAL_DMA_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_SAI_MspInit+0x196>
    {
      Error_Handler();
 80016fa:	f7ff fd69 	bl	80011d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 8001702:	671a      	str	r2, [r3, #112]	; 0x70
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 800170e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_SAI_MspInit+0x1d4>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40015804 	.word	0x40015804
 8001724:	20000ad8 	.word	0x20000ad8
 8001728:	40023800 	.word	0x40023800
 800172c:	40021000 	.word	0x40021000
 8001730:	20000220 	.word	0x20000220
 8001734:	40026428 	.word	0x40026428
 8001738:	40015824 	.word	0x40015824
 800173c:	20000280 	.word	0x20000280
 8001740:	40026470 	.word	0x40026470

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001790:	f000 f8dc 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <USART3_IRQHandler+0x10>)
 800179e:	f004 fa29 	bl	8005bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200002e0 	.word	0x200002e0

080017ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <DMA2_Stream1_IRQHandler+0x10>)
 80017b2:	f000 ffbb 	bl	800272c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000220 	.word	0x20000220

080017c0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA2_Stream4_IRQHandler+0x10>)
 80017c6:	f000 ffb1 	bl	800272c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000280 	.word	0x20000280

080017d4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <SAI1_IRQHandler+0x14>)
 80017da:	f003 fe83 	bl	80054e4 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 80017de:	4803      	ldr	r0, [pc, #12]	; (80017ec <SAI1_IRQHandler+0x18>)
 80017e0:	f003 fe80 	bl	80054e4 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000118 	.word	0x20000118
 80017ec:	2000019c 	.word	0x2000019c

080017f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <_sbrk+0x5c>)
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <_sbrk+0x60>)
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <_sbrk+0x64>)
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <_sbrk+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	429a      	cmp	r2, r3
 800181e:	d207      	bcs.n	8001830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001820:	f005 feca 	bl	80075b8 <__errno>
 8001824:	4603      	mov	r3, r0
 8001826:	220c      	movs	r2, #12
 8001828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	e009      	b.n	8001844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <_sbrk+0x64>)
 8001840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20050000 	.word	0x20050000
 8001850:	00000400 	.word	0x00000400
 8001854:	20000adc 	.word	0x20000adc
 8001858:	20000c30 	.word	0x20000c30

0800185c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <SystemInit+0x20>)
 8001862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <SystemInit+0x20>)
 8001868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800186c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001886:	490e      	ldr	r1, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800189c:	4c0b      	ldr	r4, [pc, #44]	; (80018cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018aa:	f7ff ffd7 	bl	800185c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f005 fe89 	bl	80075c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7ff f895 	bl	80009e0 <main>
  bx  lr    
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018c4:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 80018c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018cc:	20000c2c 	.word	0x20000c2c

080018d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC_IRQHandler>

080018d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d6:	2003      	movs	r0, #3
 80018d8:	f000 fd46 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 f805 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e2:	f7ff fc9d 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fd61 	bl	80023d2 <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 fd29 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000004 	.word	0x20000004
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	2000000c 	.word	0x2000000c
 8001970:	20000ae0 	.word	0x20000ae0

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000ae0 	.word	0x20000ae0

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000000c 	.word	0x2000000c

080019d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e031      	b.n	8001a4e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fc38 	bl	8001268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_ADC_Init+0x84>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	f043 0202 	orr.w	r2, r3, #2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 fad6 	bl	8001fd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f023 0303 	bic.w	r3, r3, #3
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3e:	e001      	b.n	8001a44 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	ffffeefd 	.word	0xffffeefd

08001a5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Start+0x1a>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e0ad      	b.n	8001bd2 <HAL_ADC_Start+0x176>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d018      	beq.n	8001abe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_ADC_Start+0x184>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <HAL_ADC_Start+0x188>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9a      	lsrs	r2, r3, #18
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f9      	bne.n	8001ab2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d175      	bne.n	8001bb8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad0:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <HAL_ADC_Start+0x18c>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001af2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b06:	d106      	bne.n	8001b16 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f023 0206 	bic.w	r2, r3, #6
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_ADC_Start+0x190>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d143      	bne.n	8001bd0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	e03a      	b.n	8001bd0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <HAL_ADC_Start+0x194>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d10e      	bne.n	8001b82 <HAL_ADC_Start+0x126>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b80:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_ADC_Start+0x190>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d120      	bne.n	8001bd0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <HAL_ADC_Start+0x198>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d11b      	bne.n	8001bd0 <HAL_ADC_Start+0x174>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d114      	bne.n	8001bd0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f043 0210 	orr.w	r2, r3, #16
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000004 	.word	0x20000004
 8001be4:	431bde83 	.word	0x431bde83
 8001be8:	fffff8fe 	.word	0xfffff8fe
 8001bec:	40012300 	.word	0x40012300
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40012200 	.word	0x40012200

08001bf8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d113      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c24:	d10b      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f043 0220 	orr.w	r2, r3, #32
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e063      	b.n	8001d06 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c3e:	f7ff fe99 	bl	8001974 <HAL_GetTick>
 8001c42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c44:	e021      	b.n	8001c8a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d01d      	beq.n	8001c8a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <HAL_ADC_PollForConversion+0x6c>
 8001c54:	f7ff fe8e 	bl	8001974 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d212      	bcs.n	8001c8a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d00b      	beq.n	8001c8a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0204 	orr.w	r2, r3, #4
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e03d      	b.n	8001d06 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d1d6      	bne.n	8001c46 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0212 	mvn.w	r2, #18
 8001ca0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d123      	bne.n	8001d04 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11f      	bne.n	8001d04 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d111      	bne.n	8001d04 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1c>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e136      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x28a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d93a      	bls.n	8001dca <HAL_ADC_ConfigChannel+0xa2>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d5c:	d035      	beq.n	8001dca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68d9      	ldr	r1, [r3, #12]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	3b1e      	subs	r3, #30
 8001d74:	2207      	movs	r2, #7
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a8d      	ldr	r2, [pc, #564]	; (8001fc0 <HAL_ADC_ConfigChannel+0x298>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10a      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68d9      	ldr	r1, [r3, #12]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	061a      	lsls	r2, r3, #24
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da2:	e035      	b.n	8001e10 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68d9      	ldr	r1, [r3, #12]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4403      	add	r3, r0
 8001dbc:	3b1e      	subs	r3, #30
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc8:	e022      	b.n	8001e10 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6919      	ldr	r1, [r3, #16]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	2207      	movs	r2, #7
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43da      	mvns	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	400a      	ands	r2, r1
 8001dec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6919      	ldr	r1, [r3, #16]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	4603      	mov	r3, r0
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4403      	add	r3, r0
 8001e06:	409a      	lsls	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b06      	cmp	r3, #6
 8001e16:	d824      	bhi.n	8001e62 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	3b05      	subs	r3, #5
 8001e2a:	221f      	movs	r2, #31
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43da      	mvns	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	400a      	ands	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b05      	subs	r3, #5
 8001e54:	fa00 f203 	lsl.w	r2, r0, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e60:	e04c      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d824      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b23      	subs	r3, #35	; 0x23
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	400a      	ands	r2, r1
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b23      	subs	r3, #35	; 0x23
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb2:	e023      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b41      	subs	r3, #65	; 0x41
 8001ec6:	221f      	movs	r2, #31
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b41      	subs	r3, #65	; 0x41
 8001ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a30      	ldr	r2, [pc, #192]	; (8001fc4 <HAL_ADC_ConfigChannel+0x29c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10a      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1f4>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f0e:	d105      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a2c      	ldr	r2, [pc, #176]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_ADC_ConfigChannel+0x29c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10f      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x21e>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d10b      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f38:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_ADC_ConfigChannel+0x29c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d12b      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x280>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_ADC_ConfigChannel+0x298>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <HAL_ADC_ConfigChannel+0x23a>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b11      	cmp	r3, #17
 8001f60:	d122      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f6c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_ADC_ConfigChannel+0x298>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d111      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_ADC_ConfigChannel+0x2a4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0c9a      	lsrs	r2, r3, #18
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f9      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	10000012 	.word	0x10000012
 8001fc4:	40012000 	.word	0x40012000
 8001fc8:	40012300 	.word	0x40012300
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001fdc:	4b78      	ldr	r3, [pc, #480]	; (80021c0 <ADC_Init+0x1ec>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a77      	ldr	r2, [pc, #476]	; (80021c0 <ADC_Init+0x1ec>)
 8001fe2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001fe6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001fe8:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <ADC_Init+0x1ec>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4973      	ldr	r1, [pc, #460]	; (80021c0 <ADC_Init+0x1ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	021a      	lsls	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <ADC_Init+0x1f0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d022      	beq.n	80020ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e00f      	b.n	80020ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0202 	bic.w	r2, r2, #2
 80020dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6899      	ldr	r1, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800211a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	3b01      	subs	r3, #1
 8002128:	035a      	lsls	r2, r3, #13
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e007      	b.n	8002144 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	3b01      	subs	r3, #1
 8002160:	051a      	lsls	r2, r3, #20
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	025a      	lsls	r2, r3, #9
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6899      	ldr	r1, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	029a      	lsls	r2, r3, #10
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012300 	.word	0x40012300
 80021c4:	0f000001 	.word	0x0f000001

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <__NVIC_SetPriorityGrouping+0x40>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <__NVIC_SetPriorityGrouping+0x40>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00
 800220c:	05fa0000 	.word	0x05fa0000

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	; (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	; (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	; (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff29 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff3e 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff8e 	bl	80022bc <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5d 	bl	8002268 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff31 	bl	800222c <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa2 	bl	8002324 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff fabc 	bl	8001974 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e099      	b.n	800253c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002428:	e00f      	b.n	800244a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800242a:	f7ff faa3 	bl	8001974 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b05      	cmp	r3, #5
 8002436:	d908      	bls.n	800244a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2203      	movs	r2, #3
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e078      	b.n	800253c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e8      	bne.n	800242a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_DMA_Init+0x158>)
 8002464:	4013      	ands	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d107      	bne.n	80024b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	4313      	orrs	r3, r2
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f023 0307 	bic.w	r3, r3, #7
 80024ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d117      	bne.n	800250e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fb09 	bl	8002b08 <DMA_CheckFifoParam>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800250a:	2301      	movs	r3, #1
 800250c:	e016      	b.n	800253c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fac0 	bl	8002a9c <DMA_CalcBaseAndBitshift>
 800251c:	4603      	mov	r3, r0
 800251e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	223f      	movs	r2, #63	; 0x3f
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	f010803f 	.word	0xf010803f

08002548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_DMA_Start_IT+0x26>
 800256a:	2302      	movs	r3, #2
 800256c:	e048      	b.n	8002600 <HAL_DMA_Start_IT+0xb8>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d137      	bne.n	80025f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fa52 	bl	8002a40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	223f      	movs	r2, #63	; 0x3f
 80025a2:	409a      	lsls	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0216 	orr.w	r2, r2, #22
 80025b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025c6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0208 	orr.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e005      	b.n	80025fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002616:	f7ff f9ad 	bl	8001974 <HAL_GetTick>
 800261a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d008      	beq.n	800263a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e052      	b.n	80026e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0216 	bic.w	r2, r2, #22
 8002648:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002658:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_DMA_Abort+0x62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0208 	bic.w	r2, r2, #8
 8002678:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268a:	e013      	b.n	80026b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268c:	f7ff f972 	bl	8001974 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b05      	cmp	r3, #5
 8002698:	d90c      	bls.n	80026b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2203      	movs	r2, #3
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e015      	b.n	80026e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e4      	bne.n	800268c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	223f      	movs	r2, #63	; 0x3f
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d004      	beq.n	8002706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e00c      	b.n	8002720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2205      	movs	r2, #5
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002738:	4b8e      	ldr	r3, [pc, #568]	; (8002974 <HAL_DMA_IRQHandler+0x248>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a8e      	ldr	r2, [pc, #568]	; (8002978 <HAL_DMA_IRQHandler+0x24c>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0a9b      	lsrs	r3, r3, #10
 8002744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2208      	movs	r2, #8
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01a      	beq.n	8002798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2208      	movs	r2, #8
 8002786:	409a      	lsls	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	2201      	movs	r2, #1
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	2201      	movs	r2, #1
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f043 0202 	orr.w	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d2:	2204      	movs	r2, #4
 80027d4:	409a      	lsls	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	2204      	movs	r2, #4
 80027f2:	409a      	lsls	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f043 0204 	orr.w	r2, r3, #4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	2210      	movs	r2, #16
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d043      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d03c      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	2210      	movs	r2, #16
 8002828:	409a      	lsls	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d018      	beq.n	800286e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d108      	bne.n	800285c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d024      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
 800285a:	e01f      	b.n	800289c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
 800286c:	e016      	b.n	800289c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0208 	bic.w	r2, r2, #8
 800288a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2220      	movs	r2, #32
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 808f 	beq.w	80029cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8087 	beq.w	80029cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2220      	movs	r2, #32
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d136      	bne.n	8002944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0216 	bic.w	r2, r2, #22
 80028e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_DMA_IRQHandler+0x1da>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0208 	bic.w	r2, r2, #8
 8002914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	223f      	movs	r2, #63	; 0x3f
 800291c:	409a      	lsls	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002936:	2b00      	cmp	r3, #0
 8002938:	d07e      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
        }
        return;
 8002942:	e079      	b.n	8002a38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01d      	beq.n	800298e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10d      	bne.n	800297c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	2b00      	cmp	r3, #0
 8002966:	d031      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
 8002970:	e02c      	b.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
 8002972:	bf00      	nop
 8002974:	20000004 	.word	0x20000004
 8002978:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d023      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
 800298c:	e01e      	b.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10f      	bne.n	80029bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0210 	bic.w	r2, r2, #16
 80029aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d032      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d022      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2205      	movs	r2, #5
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	3301      	adds	r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d307      	bcc.n	8002a14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f2      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x2cc>
 8002a12:	e000      	b.n	8002a16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
 8002a36:	e000      	b.n	8002a3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a38:	bf00      	nop
    }
  }
}
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d108      	bne.n	8002a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a7e:	e007      	b.n	8002a90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b10      	subs	r3, #16
 8002aac:	4a13      	ldr	r2, [pc, #76]	; (8002afc <DMA_CalcBaseAndBitshift+0x60>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <DMA_CalcBaseAndBitshift+0x64>)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d908      	bls.n	8002adc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <DMA_CalcBaseAndBitshift+0x68>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	1d1a      	adds	r2, r3, #4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	659a      	str	r2, [r3, #88]	; 0x58
 8002ada:	e006      	b.n	8002aea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <DMA_CalcBaseAndBitshift+0x68>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	aaaaaaab 	.word	0xaaaaaaab
 8002b00:	08007fdc 	.word	0x08007fdc
 8002b04:	fffffc00 	.word	0xfffffc00

08002b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d856      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xce>
 8002b28:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <DMA_CheckFifoParam+0x28>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b41 	.word	0x08002b41
 8002b34:	08002b53 	.word	0x08002b53
 8002b38:	08002b41 	.word	0x08002b41
 8002b3c:	08002bd7 	.word	0x08002bd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d046      	beq.n	8002bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e043      	b.n	8002bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b5a:	d140      	bne.n	8002bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e03d      	b.n	8002bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6a:	d121      	bne.n	8002bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d837      	bhi.n	8002be2 <DMA_CheckFifoParam+0xda>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <DMA_CheckFifoParam+0x70>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b8f 	.word	0x08002b8f
 8002b80:	08002b89 	.word	0x08002b89
 8002b84:	08002ba1 	.word	0x08002ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e030      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d025      	beq.n	8002be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9e:	e022      	b.n	8002be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bae:	e01c      	b.n	8002bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d903      	bls.n	8002bbe <DMA_CheckFifoParam+0xb6>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d003      	beq.n	8002bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bbc:	e018      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc2:	e015      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e00b      	b.n	8002bee <DMA_CheckFifoParam+0xe6>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e00a      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e008      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bde:	bf00      	nop
 8002be0:	e006      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
 8002be4:	e004      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
    }
  } 
  
  return status; 
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e175      	b.n	8002f0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	f040 8164 	bne.w	8002f06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d005      	beq.n	8002c56 <HAL_GPIO_Init+0x56>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d130      	bne.n	8002cb8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 0201 	and.w	r2, r3, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d017      	beq.n	8002cf4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d123      	bne.n	8002d48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	08da      	lsrs	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3208      	adds	r2, #8
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	220f      	movs	r2, #15
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	69b9      	ldr	r1, [r7, #24]
 8002d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80be 	beq.w	8002f06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <HAL_GPIO_Init+0x324>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a65      	ldr	r2, [pc, #404]	; (8002f24 <HAL_GPIO_Init+0x324>)
 8002d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_GPIO_Init+0x324>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002da2:	4a61      	ldr	r2, [pc, #388]	; (8002f28 <HAL_GPIO_Init+0x328>)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <HAL_GPIO_Init+0x32c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d037      	beq.n	8002e3e <HAL_GPIO_Init+0x23e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_GPIO_Init+0x330>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_GPIO_Init+0x23a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a56      	ldr	r2, [pc, #344]	; (8002f34 <HAL_GPIO_Init+0x334>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02b      	beq.n	8002e36 <HAL_GPIO_Init+0x236>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a55      	ldr	r2, [pc, #340]	; (8002f38 <HAL_GPIO_Init+0x338>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d025      	beq.n	8002e32 <HAL_GPIO_Init+0x232>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a54      	ldr	r2, [pc, #336]	; (8002f3c <HAL_GPIO_Init+0x33c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01f      	beq.n	8002e2e <HAL_GPIO_Init+0x22e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <HAL_GPIO_Init+0x340>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d019      	beq.n	8002e2a <HAL_GPIO_Init+0x22a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_GPIO_Init+0x344>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_GPIO_Init+0x226>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a51      	ldr	r2, [pc, #324]	; (8002f48 <HAL_GPIO_Init+0x348>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00d      	beq.n	8002e22 <HAL_GPIO_Init+0x222>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a50      	ldr	r2, [pc, #320]	; (8002f4c <HAL_GPIO_Init+0x34c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <HAL_GPIO_Init+0x21e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4f      	ldr	r2, [pc, #316]	; (8002f50 <HAL_GPIO_Init+0x350>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_GPIO_Init+0x21a>
 8002e16:	2309      	movs	r3, #9
 8002e18:	e012      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e1a:	230a      	movs	r3, #10
 8002e1c:	e010      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e1e:	2308      	movs	r3, #8
 8002e20:	e00e      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e22:	2307      	movs	r3, #7
 8002e24:	e00c      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e26:	2306      	movs	r3, #6
 8002e28:	e00a      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	e008      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e004      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_GPIO_Init+0x240>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f002 0203 	and.w	r2, r2, #3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e50:	4935      	ldr	r1, [pc, #212]	; (8002f28 <HAL_GPIO_Init+0x328>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e82:	4a34      	ldr	r2, [pc, #208]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e88:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eac:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_GPIO_Init+0x354>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	f67f ae86 	bls.w	8002c20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021800 	.word	0x40021800
 8002f48:	40021c00 	.word	0x40021c00
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40022400 	.word	0x40022400
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
 8002f64:	4613      	mov	r3, r2
 8002f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f68:	787b      	ldrb	r3, [r7, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f74:	e003      	b.n	8002f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	041a      	lsls	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	619a      	str	r2, [r3, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f9c:	887a      	ldrh	r2, [r7, #2]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	041a      	lsls	r2, r3, #16
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	400b      	ands	r3, r1
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe f97e 	bl	80012e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003010:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003020:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	e006      	b.n	8003048 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003046:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d104      	bne.n	800305a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003058:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_I2C_Init+0x11c>)
 8003066:	430b      	orrs	r3, r1
 8003068:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003078:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	02008000 	.word	0x02008000

080030e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	817b      	strh	r3, [r7, #10]
 80030f2:	460b      	mov	r3, r1
 80030f4:	813b      	strh	r3, [r7, #8]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b20      	cmp	r3, #32
 8003104:	f040 80f9 	bne.w	80032fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_I2C_Mem_Write+0x34>
 800310e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0ed      	b.n	80032fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_I2C_Mem_Write+0x4e>
 800312a:	2302      	movs	r3, #2
 800312c:	e0e6      	b.n	80032fc <HAL_I2C_Mem_Write+0x21c>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003136:	f7fe fc1d 	bl	8001974 <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2319      	movs	r3, #25
 8003142:	2201      	movs	r2, #1
 8003144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f961 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0d1      	b.n	80032fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2221      	movs	r2, #33	; 0x21
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2240      	movs	r2, #64	; 0x40
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003180:	88f8      	ldrh	r0, [r7, #6]
 8003182:	893a      	ldrh	r2, [r7, #8]
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4603      	mov	r3, r0
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8c5 	bl	8003320 <I2C_RequestMemoryWrite>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0a9      	b.n	80032fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2bff      	cmp	r3, #255	; 0xff
 80031b0:	d90e      	bls.n	80031d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	8979      	ldrh	r1, [r7, #10]
 80031c0:	2300      	movs	r3, #0
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fabd 	bl	8003748 <I2C_TransferConfig>
 80031ce:	e00f      	b.n	80031f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	8979      	ldrh	r1, [r7, #10]
 80031e2:	2300      	movs	r3, #0
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 faac 	bl	8003748 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f94b 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e07b      	b.n	80032fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d034      	beq.n	80032a8 <HAL_I2C_Mem_Write+0x1c8>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d130      	bne.n	80032a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	2200      	movs	r2, #0
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f8dd 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e04d      	b.n	80032fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	2bff      	cmp	r3, #255	; 0xff
 8003268:	d90e      	bls.n	8003288 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	b2da      	uxtb	r2, r3
 8003276:	8979      	ldrh	r1, [r7, #10]
 8003278:	2300      	movs	r3, #0
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fa61 	bl	8003748 <I2C_TransferConfig>
 8003286:	e00f      	b.n	80032a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	b2da      	uxtb	r2, r3
 8003298:	8979      	ldrh	r1, [r7, #10]
 800329a:	2300      	movs	r3, #0
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa50 	bl	8003748 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d19e      	bne.n	80031f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f92a 	bl	8003510 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e01a      	b.n	80032fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2220      	movs	r2, #32
 80032cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_I2C_Mem_Write+0x224>)
 80032da:	400b      	ands	r3, r1
 80032dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e000      	b.n	80032fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
  }
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	fe00e800 	.word	0xfe00e800

08003308 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	817b      	strh	r3, [r7, #10]
 8003332:	460b      	mov	r3, r1
 8003334:	813b      	strh	r3, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	8979      	ldrh	r1, [r7, #10]
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <I2C_RequestMemoryWrite+0xa4>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f9fd 	bl	8003748 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	69b9      	ldr	r1, [r7, #24]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f89c 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e02c      	b.n	80033bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003368:	893b      	ldrh	r3, [r7, #8]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
 8003372:	e015      	b.n	80033a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003374:	893b      	ldrh	r3, [r7, #8]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	b29b      	uxth	r3, r3
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f882 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e012      	b.n	80033bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003396:	893b      	ldrh	r3, [r7, #8]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f830 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	80002000 	.word	0x80002000

080033c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d103      	bne.n	80033e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	619a      	str	r2, [r3, #24]
  }
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003420:	e022      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d01e      	beq.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe faa3 	bl	8001974 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e00f      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	429a      	cmp	r2, r3
 8003484:	d0cd      	beq.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800349c:	e02c      	b.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f870 	bl	8003588 <I2C_IsErrorOccurred>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e02a      	b.n	8003508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d01e      	beq.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fa5b 	bl	8001974 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d113      	bne.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e007      	b.n	8003508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d1cb      	bne.n	800349e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351c:	e028      	b.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f830 	bl	8003588 <I2C_IsErrorOccurred>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e026      	b.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fa1f 	bl	8001974 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d113      	bne.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e007      	b.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b20      	cmp	r3, #32
 800357c:	d1cf      	bne.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d068      	beq.n	8003686 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2210      	movs	r2, #16
 80035ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035bc:	e049      	b.n	8003652 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d045      	beq.n	8003652 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fe f9d5 	bl	8001974 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_IsErrorOccurred+0x54>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d13a      	bne.n	8003652 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fe:	d121      	bne.n	8003644 <I2C_IsErrorOccurred+0xbc>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003606:	d01d      	beq.n	8003644 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b20      	cmp	r3, #32
 800360c:	d01a      	beq.n	8003644 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800361c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800361e:	f7fe f9a9 	bl	8001974 <HAL_GetTick>
 8003622:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003624:	e00e      	b.n	8003644 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003626:	f7fe f9a5 	bl	8001974 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b19      	cmp	r3, #25
 8003632:	d907      	bls.n	8003644 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f043 0320 	orr.w	r3, r3, #32
 800363a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003642:	e006      	b.n	8003652 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b20      	cmp	r3, #32
 8003650:	d1e9      	bne.n	8003626 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b20      	cmp	r3, #32
 800365e:	d003      	beq.n	8003668 <I2C_IsErrorOccurred+0xe0>
 8003660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0aa      	beq.n	80035be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800366c:	2b00      	cmp	r3, #0
 800366e:	d103      	bne.n	8003678 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2220      	movs	r2, #32
 8003676:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01c      	beq.n	8003736 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fe63 	bl	80033c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <I2C_IsErrorOccurred+0x1bc>)
 800370e:	400b      	ands	r3, r1
 8003710:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800373a:	4618      	mov	r0, r3
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	fe00e800 	.word	0xfe00e800

08003748 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	817b      	strh	r3, [r7, #10]
 8003756:	4613      	mov	r3, r2
 8003758:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375a:	897b      	ldrh	r3, [r7, #10]
 800375c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003760:	7a7b      	ldrb	r3, [r7, #9]
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003768:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	4313      	orrs	r3, r2
 8003772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003776:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	0d5b      	lsrs	r3, r3, #21
 8003782:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <I2C_TransferConfig+0x60>)
 8003788:	430b      	orrs	r3, r1
 800378a:	43db      	mvns	r3, r3
 800378c:	ea02 0103 	and.w	r1, r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	03ff63ff 	.word	0x03ff63ff

080037ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d138      	bne.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e032      	b.n	8003836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2224      	movs	r2, #36	; 0x24
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b20      	cmp	r3, #32
 8003856:	d139      	bne.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003862:	2302      	movs	r3, #2
 8003864:	e033      	b.n	80038ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2224      	movs	r2, #36	; 0x24
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003894:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038dc:	b08f      	sub	sp, #60	; 0x3c
 80038de:	af0a      	add	r7, sp, #40	; 0x28
 80038e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e116      	b.n	8003b1a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd fdb4 	bl	8001474 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2203      	movs	r2, #3
 8003910:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d102      	bne.n	8003926 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f003 fb80 	bl	8007030 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	687e      	ldr	r6, [r7, #4]
 8003938:	466d      	mov	r5, sp
 800393a:	f106 0410 	add.w	r4, r6, #16
 800393e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003946:	e894 0003 	ldmia.w	r4, {r0, r1}
 800394a:	e885 0003 	stmia.w	r5, {r0, r1}
 800394e:	1d33      	adds	r3, r6, #4
 8003950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f003 fb14 	bl	8006f80 <USB_CoreInit>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e0d7      	b.n	8003b1a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f003 fb6e 	bl	8007052 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e04a      	b.n	8003a12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	333d      	adds	r3, #61	; 0x3d
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	333c      	adds	r3, #60	; 0x3c
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	b298      	uxth	r0, r3
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3344      	adds	r3, #68	; 0x44
 80039b8:	4602      	mov	r2, r0
 80039ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3340      	adds	r3, #64	; 0x40
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3348      	adds	r3, #72	; 0x48
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	334c      	adds	r3, #76	; 0x4c
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3354      	adds	r3, #84	; 0x54
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3af      	bcc.n	800397c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	e044      	b.n	8003aac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3b5      	bcc.n	8003a22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	687e      	ldr	r6, [r7, #4]
 8003abe:	466d      	mov	r5, sp
 8003ac0:	f106 0410 	add.w	r4, r6, #16
 8003ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad4:	1d33      	adds	r3, r6, #4
 8003ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad8:	6838      	ldr	r0, [r7, #0]
 8003ada:	f003 fb07 	bl	80070ec <USB_DevInit>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e014      	b.n	8003b1a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d102      	bne.n	8003b0e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f80b 	bl	8003b24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f003 fcc5 	bl	80074a2 <USB_DevDisconnect>

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	10000003 	.word	0x10000003

08003b6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40007000 	.word	0x40007000

08003b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b94:	2300      	movs	r3, #0
 8003b96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e291      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8087 	beq.w	8003cbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bb0:	4b96      	ldr	r3, [pc, #600]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d00c      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbc:	4b93      	ldr	r3, [pc, #588]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d112      	bne.n	8003bee <HAL_RCC_OscConfig+0x62>
 8003bc8:	4b90      	ldr	r3, [pc, #576]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd4:	d10b      	bne.n	8003bee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd6:	4b8d      	ldr	r3, [pc, #564]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d06c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x130>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d168      	bne.n	8003cbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e26b      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCC_OscConfig+0x7a>
 8003bf8:	4b84      	ldr	r3, [pc, #528]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a83      	ldr	r2, [pc, #524]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	e02e      	b.n	8003c64 <HAL_RCC_OscConfig+0xd8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x9c>
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7e      	ldr	r2, [pc, #504]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b7c      	ldr	r3, [pc, #496]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7b      	ldr	r2, [pc, #492]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e01d      	b.n	8003c64 <HAL_RCC_OscConfig+0xd8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0xc0>
 8003c32:	4b76      	ldr	r3, [pc, #472]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a75      	ldr	r2, [pc, #468]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b73      	ldr	r3, [pc, #460]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a72      	ldr	r2, [pc, #456]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCC_OscConfig+0xd8>
 8003c4c:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a6e      	ldr	r2, [pc, #440]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b6c      	ldr	r3, [pc, #432]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a6b      	ldr	r2, [pc, #428]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fe82 	bl	8001974 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fd fe7e 	bl	8001974 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e21f      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe8>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fd fe6e 	bl	8001974 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fe6a 	bl	8001974 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e20b      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	4b57      	ldr	r3, [pc, #348]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x110>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d069      	beq.n	8003d9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cca:	4b50      	ldr	r3, [pc, #320]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd6:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d11c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x190>
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_RCC_OscConfig+0x17a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1df      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b41      	ldr	r3, [pc, #260]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	493d      	ldr	r1, [pc, #244]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	e040      	b.n	8003d9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d023      	beq.n	8003d6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d24:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fd fe20 	bl	8001974 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d38:	f7fd fe1c 	bl	8001974 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1bd      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d56:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4929      	ldr	r1, [pc, #164]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]
 8003d6a:	e018      	b.n	8003d9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6c:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a26      	ldr	r2, [pc, #152]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fd fdfc 	bl	8001974 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d80:	f7fd fdf8 	bl	8001974 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e199      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d038      	beq.n	8003e1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d019      	beq.n	8003de6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db2:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	4a15      	ldr	r2, [pc, #84]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fd fdd9 	bl	8001974 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7fd fdd5 	bl	8001974 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e176      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x23a>
 8003de4:	e01a      	b.n	8003e1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <HAL_RCC_OscConfig+0x280>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df2:	f7fd fdbf 	bl	8001974 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fd fdbb 	bl	8001974 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d903      	bls.n	8003e10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e15c      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
 8003e0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	4b91      	ldr	r3, [pc, #580]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ee      	bne.n	8003dfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a4 	beq.w	8003f72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2a:	4b8b      	ldr	r3, [pc, #556]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	4b88      	ldr	r3, [pc, #544]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	4a87      	ldr	r2, [pc, #540]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40
 8003e42:	4b85      	ldr	r3, [pc, #532]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e52:	4b82      	ldr	r3, [pc, #520]	; (800405c <HAL_RCC_OscConfig+0x4d0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d118      	bne.n	8003e90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e5e:	4b7f      	ldr	r3, [pc, #508]	; (800405c <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a7e      	ldr	r2, [pc, #504]	; (800405c <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6a:	f7fd fd83 	bl	8001974 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fd fd7f 	bl	8001974 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b64      	cmp	r3, #100	; 0x64
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e120      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e84:	4b75      	ldr	r3, [pc, #468]	; (800405c <HAL_RCC_OscConfig+0x4d0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x31a>
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a6e      	ldr	r2, [pc, #440]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e02d      	b.n	8003f02 <HAL_RCC_OscConfig+0x376>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x33c>
 8003eae:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a69      	ldr	r2, [pc, #420]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	4b67      	ldr	r3, [pc, #412]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a66      	ldr	r2, [pc, #408]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	e01c      	b.n	8003f02 <HAL_RCC_OscConfig+0x376>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d10c      	bne.n	8003eea <HAL_RCC_OscConfig+0x35e>
 8003ed0:	4b61      	ldr	r3, [pc, #388]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a60      	ldr	r2, [pc, #384]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	f043 0304 	orr.w	r3, r3, #4
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	4b5e      	ldr	r3, [pc, #376]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a5d      	ldr	r2, [pc, #372]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	e00b      	b.n	8003f02 <HAL_RCC_OscConfig+0x376>
 8003eea:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a5a      	ldr	r2, [pc, #360]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef6:	4b58      	ldr	r3, [pc, #352]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a57      	ldr	r2, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d015      	beq.n	8003f36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0a:	f7fd fd33 	bl	8001974 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f12:	f7fd fd2f 	bl	8001974 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0ce      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ee      	beq.n	8003f12 <HAL_RCC_OscConfig+0x386>
 8003f34:	e014      	b.n	8003f60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f36:	f7fd fd1d 	bl	8001974 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fd fd19 	bl	8001974 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e0b8      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ee      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d105      	bne.n	8003f72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f66:	4b3c      	ldr	r3, [pc, #240]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a3b      	ldr	r2, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a4 	beq.w	80040c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d06b      	beq.n	8004060 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d149      	bne.n	8004024 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f90:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a30      	ldr	r2, [pc, #192]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fcea 	bl	8001974 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fd fce6 	bl	8001974 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e087      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	4b28      	ldr	r3, [pc, #160]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff0:	4b19      	ldr	r3, [pc, #100]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a18      	ldr	r2, [pc, #96]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fcba 	bl	8001974 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd fcb6 	bl	8001974 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e057      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x478>
 8004022:	e04f      	b.n	80040c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a0b      	ldr	r2, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fca0 	bl	8001974 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd fc9c 	bl	8001974 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e03d      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_RCC_OscConfig+0x4cc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x4ac>
 8004056:	e035      	b.n	80040c4 <HAL_RCC_OscConfig+0x538>
 8004058:	40023800 	.word	0x40023800
 800405c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_RCC_OscConfig+0x544>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d028      	beq.n	80040c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d121      	bne.n	80040c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d11a      	bne.n	80040c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004090:	4013      	ands	r3, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004096:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004098:	4293      	cmp	r3, r2
 800409a:	d111      	bne.n	80040c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	3b01      	subs	r3, #1
 80040aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800

080040d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0d0      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b6a      	ldr	r3, [pc, #424]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d910      	bls.n	800411c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b67      	ldr	r3, [pc, #412]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	4965      	ldr	r1, [pc, #404]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b63      	ldr	r3, [pc, #396]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0b8      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d020      	beq.n	800416a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004134:	4b59      	ldr	r3, [pc, #356]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a58      	ldr	r2, [pc, #352]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800413e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800414c:	4b53      	ldr	r3, [pc, #332]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4a52      	ldr	r2, [pc, #328]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004158:	4b50      	ldr	r3, [pc, #320]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	494d      	ldr	r1, [pc, #308]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d040      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d115      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07f      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e073      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a6:	4b3d      	ldr	r3, [pc, #244]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06b      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4936      	ldr	r1, [pc, #216]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fd fbd4 	bl	8001974 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fd fbd0 	bl	8001974 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e053      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b2d      	ldr	r3, [pc, #180]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d210      	bcs.n	8004228 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 020f 	bic.w	r2, r3, #15
 800420e:	4922      	ldr	r1, [pc, #136]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e032      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4916      	ldr	r1, [pc, #88]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	490e      	ldr	r1, [pc, #56]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004266:	f000 f821 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 800426a:	4602      	mov	r2, r0
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	490a      	ldr	r1, [pc, #40]	; (80042a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004278:	5ccb      	ldrb	r3, [r1, r3]
 800427a:	fa22 f303 	lsr.w	r3, r2, r3
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd fb30 	bl	80018ec <HAL_InitTick>

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40023c00 	.word	0x40023c00
 800429c:	40023800 	.word	0x40023800
 80042a0:	08007fc4 	.word	0x08007fc4
 80042a4:	20000004 	.word	0x20000004
 80042a8:	20000008 	.word	0x20000008

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b0:	b094      	sub	sp, #80	; 0x50
 80042b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	647b      	str	r3, [r7, #68]	; 0x44
 80042b8:	2300      	movs	r3, #0
 80042ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042bc:	2300      	movs	r3, #0
 80042be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c4:	4b79      	ldr	r3, [pc, #484]	; (80044ac <HAL_RCC_GetSysClockFreq+0x200>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d00d      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x40>
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	f200 80e1 	bhi.w	8004498 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x34>
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d003      	beq.n	80042e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042de:	e0db      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e0:	4b73      	ldr	r3, [pc, #460]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042e4:	e0db      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042e6:	4b73      	ldr	r3, [pc, #460]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ea:	e0d8      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ec:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCC_GetSysClockFreq+0x200>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042f6:	4b6d      	ldr	r3, [pc, #436]	; (80044ac <HAL_RCC_GetSysClockFreq+0x200>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d063      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004302:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	2200      	movs	r2, #0
 800430a:	63bb      	str	r3, [r7, #56]	; 0x38
 800430c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004314:	633b      	str	r3, [r7, #48]	; 0x30
 8004316:	2300      	movs	r3, #0
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
 800431a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	f04f 0000 	mov.w	r0, #0
 8004326:	f04f 0100 	mov.w	r1, #0
 800432a:	0159      	lsls	r1, r3, #5
 800432c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004330:	0150      	lsls	r0, r2, #5
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4621      	mov	r1, r4
 8004338:	1a51      	subs	r1, r2, r1
 800433a:	6139      	str	r1, [r7, #16]
 800433c:	4629      	mov	r1, r5
 800433e:	eb63 0301 	sbc.w	r3, r3, r1
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004350:	4659      	mov	r1, fp
 8004352:	018b      	lsls	r3, r1, #6
 8004354:	4651      	mov	r1, sl
 8004356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800435a:	4651      	mov	r1, sl
 800435c:	018a      	lsls	r2, r1, #6
 800435e:	4651      	mov	r1, sl
 8004360:	ebb2 0801 	subs.w	r8, r2, r1
 8004364:	4659      	mov	r1, fp
 8004366:	eb63 0901 	sbc.w	r9, r3, r1
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800437a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800437e:	4690      	mov	r8, r2
 8004380:	4699      	mov	r9, r3
 8004382:	4623      	mov	r3, r4
 8004384:	eb18 0303 	adds.w	r3, r8, r3
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	462b      	mov	r3, r5
 800438c:	eb49 0303 	adc.w	r3, r9, r3
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800439e:	4629      	mov	r1, r5
 80043a0:	024b      	lsls	r3, r1, #9
 80043a2:	4621      	mov	r1, r4
 80043a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043a8:	4621      	mov	r1, r4
 80043aa:	024a      	lsls	r2, r1, #9
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b2:	2200      	movs	r2, #0
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043bc:	f7fb ff80 	bl	80002c0 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c8:	e058      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ca:	4b38      	ldr	r3, [pc, #224]	; (80044ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	2200      	movs	r2, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	4611      	mov	r1, r2
 80043d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	2300      	movs	r3, #0
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043e4:	4642      	mov	r2, r8
 80043e6:	464b      	mov	r3, r9
 80043e8:	f04f 0000 	mov.w	r0, #0
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	0159      	lsls	r1, r3, #5
 80043f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f6:	0150      	lsls	r0, r2, #5
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4641      	mov	r1, r8
 80043fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004402:	4649      	mov	r1, r9
 8004404:	eb63 0b01 	sbc.w	fp, r3, r1
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004414:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004418:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800441c:	ebb2 040a 	subs.w	r4, r2, sl
 8004420:	eb63 050b 	sbc.w	r5, r3, fp
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	00eb      	lsls	r3, r5, #3
 800442e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004432:	00e2      	lsls	r2, r4, #3
 8004434:	4614      	mov	r4, r2
 8004436:	461d      	mov	r5, r3
 8004438:	4643      	mov	r3, r8
 800443a:	18e3      	adds	r3, r4, r3
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	464b      	mov	r3, r9
 8004440:	eb45 0303 	adc.w	r3, r5, r3
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004452:	4629      	mov	r1, r5
 8004454:	028b      	lsls	r3, r1, #10
 8004456:	4621      	mov	r1, r4
 8004458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800445c:	4621      	mov	r1, r4
 800445e:	028a      	lsls	r2, r1, #10
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004466:	2200      	movs	r2, #0
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	61fa      	str	r2, [r7, #28]
 800446c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004470:	f7fb ff26 	bl	80002c0 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4613      	mov	r3, r2
 800447a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_GetSysClockFreq+0x200>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	3301      	adds	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800448c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800448e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004496:	e002      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800449a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800449c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3750      	adds	r7, #80	; 0x50
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000004 	.word	0x20000004

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a9b      	lsrs	r3, r3, #10
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	08007fd4 	.word	0x08007fd4

080044f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044fc:	f7ff ffdc 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0b5b      	lsrs	r3, r3, #13
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	; (800451c <HAL_RCC_GetPCLK2Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	08007fd4 	.word	0x08007fd4

08004520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d012      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004548:	4b69      	ldr	r3, [pc, #420]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a68      	ldr	r2, [pc, #416]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004552:	6093      	str	r3, [r2, #8]
 8004554:	4b66      	ldr	r3, [pc, #408]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455c:	4964      	ldr	r1, [pc, #400]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800456a:	2301      	movs	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d017      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800457a:	4b5d      	ldr	r3, [pc, #372]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	4959      	ldr	r1, [pc, #356]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004598:	d101      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d017      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	494a      	ldr	r1, [pc, #296]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d4:	d101      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045e2:	2301      	movs	r3, #1
 80045e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 808b 	beq.w	800471a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	4a39      	ldr	r2, [pc, #228]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460e:	6413      	str	r3, [r2, #64]	; 0x40
 8004610:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800461c:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a34      	ldr	r2, [pc, #208]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004628:	f7fd f9a4 	bl	8001974 <HAL_GetTick>
 800462c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004630:	f7fd f9a0 	bl	8001974 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e357      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004642:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800464e:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004656:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d035      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	429a      	cmp	r2, r3
 800466a:	d02e      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800466c:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004674:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004676:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004682:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d114      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fd f968 	bl	8001974 <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a6:	e00a      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fd f964 	bl	8001974 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e319      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ee      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d6:	d111      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046e6:	400b      	ands	r3, r1
 80046e8:	4901      	ldr	r1, [pc, #4]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
 80046ee:	e00b      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40007000 	.word	0x40007000
 80046f8:	0ffffcff 	.word	0x0ffffcff
 80046fc:	4baa      	ldr	r3, [pc, #680]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4aa9      	ldr	r2, [pc, #676]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004702:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004706:	6093      	str	r3, [r2, #8]
 8004708:	4ba7      	ldr	r3, [pc, #668]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004714:	49a4      	ldr	r1, [pc, #656]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004716:	4313      	orrs	r3, r2
 8004718:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	d010      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004726:	4ba0      	ldr	r3, [pc, #640]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472c:	4a9e      	ldr	r2, [pc, #632]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004732:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004736:	4b9c      	ldr	r3, [pc, #624]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004738:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	4999      	ldr	r1, [pc, #612]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004754:	4b94      	ldr	r3, [pc, #592]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004762:	4991      	ldr	r1, [pc, #580]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004776:	4b8c      	ldr	r3, [pc, #560]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004784:	4988      	ldr	r1, [pc, #544]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004798:	4b83      	ldr	r3, [pc, #524]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a6:	4980      	ldr	r1, [pc, #512]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ba:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	4977      	ldr	r1, [pc, #476]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047dc:	4b72      	ldr	r3, [pc, #456]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	496f      	ldr	r1, [pc, #444]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047fe:	4b6a      	ldr	r3, [pc, #424]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	f023 020c 	bic.w	r2, r3, #12
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480c:	4966      	ldr	r1, [pc, #408]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004820:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	495e      	ldr	r1, [pc, #376]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004842:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004848:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004850:	4955      	ldr	r1, [pc, #340]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004864:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	494d      	ldr	r1, [pc, #308]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004886:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	4944      	ldr	r1, [pc, #272]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048a8:	4b3f      	ldr	r3, [pc, #252]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	493c      	ldr	r1, [pc, #240]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048ca:	4b37      	ldr	r3, [pc, #220]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d8:	4933      	ldr	r1, [pc, #204]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048ec:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fa:	492b      	ldr	r1, [pc, #172]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d011      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800490e:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800491c:	4922      	ldr	r1, [pc, #136]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800492c:	d101      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800492e:	2301      	movs	r3, #1
 8004930:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800493e:	2301      	movs	r3, #1
 8004940:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800494e:	4b16      	ldr	r3, [pc, #88]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495c:	4912      	ldr	r1, [pc, #72]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004980:	4909      	ldr	r1, [pc, #36]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d006      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80d9 	beq.w	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800499c:	4b02      	ldr	r3, [pc, #8]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a01      	ldr	r2, [pc, #4]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049a6:	e001      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ae:	f7fc ffe1 	bl	8001974 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049b6:	f7fc ffdd 	bl	8001974 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b64      	cmp	r3, #100	; 0x64
 80049c2:	d901      	bls.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e194      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049c8:	4b6c      	ldr	r3, [pc, #432]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d021      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d11d      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049e8:	4b64      	ldr	r3, [pc, #400]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049f6:	4b61      	ldr	r3, [pc, #388]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fc:	0e1b      	lsrs	r3, r3, #24
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	019a      	lsls	r2, r3, #6
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	061b      	lsls	r3, r3, #24
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	071b      	lsls	r3, r3, #28
 8004a1c:	4957      	ldr	r1, [pc, #348]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02e      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a4e:	d129      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a50:	4b4a      	ldr	r3, [pc, #296]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a5e:	4b47      	ldr	r3, [pc, #284]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a64:	0f1b      	lsrs	r3, r3, #28
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	019a      	lsls	r2, r3, #6
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	061b      	lsls	r3, r3, #24
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	071b      	lsls	r3, r3, #28
 8004a84:	493d      	ldr	r1, [pc, #244]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a8c:	4b3b      	ldr	r3, [pc, #236]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a92:	f023 021f 	bic.w	r2, r3, #31
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	4937      	ldr	r1, [pc, #220]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01d      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ab0:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab6:	0e1b      	lsrs	r3, r3, #24
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004abe:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac4:	0f1b      	lsrs	r3, r3, #28
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	019a      	lsls	r2, r3, #6
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	061b      	lsls	r3, r3, #24
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	071b      	lsls	r3, r3, #28
 8004ae4:	4925      	ldr	r1, [pc, #148]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d011      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	019a      	lsls	r2, r3, #6
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	061b      	lsls	r3, r3, #24
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	071b      	lsls	r3, r3, #28
 8004b14:	4919      	ldr	r1, [pc, #100]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b1c:	4b17      	ldr	r3, [pc, #92]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fc ff24 	bl	8001974 <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b30:	f7fc ff20 	bl	8001974 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e0d7      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b42:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 80cd 	bne.w	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b62:	f7fc ff07 	bl	8001974 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b6a:	f7fc ff03 	bl	8001974 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b64      	cmp	r3, #100	; 0x64
 8004b76:	d903      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e0ba      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b80:	4b5e      	ldr	r3, [pc, #376]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b8c:	d0ed      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d02e      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d12a      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bb6:	4b51      	ldr	r3, [pc, #324]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bc4:	4b4d      	ldr	r3, [pc, #308]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	0f1b      	lsrs	r3, r3, #28
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	019a      	lsls	r2, r3, #6
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	071b      	lsls	r3, r3, #28
 8004bea:	4944      	ldr	r1, [pc, #272]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bf2:	4b42      	ldr	r3, [pc, #264]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	3b01      	subs	r3, #1
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	493d      	ldr	r1, [pc, #244]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d022      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c20:	d11d      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c30:	4b32      	ldr	r3, [pc, #200]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	0f1b      	lsrs	r3, r3, #28
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	019a      	lsls	r2, r3, #6
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	061b      	lsls	r3, r3, #24
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	071b      	lsls	r3, r3, #28
 8004c56:	4929      	ldr	r1, [pc, #164]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d028      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c6a:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	0e1b      	lsrs	r3, r3, #24
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c78:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	019a      	lsls	r2, r3, #6
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	431a      	orrs	r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	061b      	lsls	r3, r3, #24
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	071b      	lsls	r3, r3, #28
 8004c9e:	4917      	ldr	r1, [pc, #92]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	4911      	ldr	r1, [pc, #68]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc8:	f7fc fe54 	bl	8001974 <HAL_GetTick>
 8004ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cd0:	f7fc fe50 	bl	8001974 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e007      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cee:	d1ef      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800

08004d00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d1e:	f040 808d 	bne.w	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004d22:	4b93      	ldr	r3, [pc, #588]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d28:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d30:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d38:	d07c      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d40:	d87b      	bhi.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d004      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4e:	d039      	beq.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004d50:	e073      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d52:	4b87      	ldr	r3, [pc, #540]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d108      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d5e:	4b84      	ldr	r3, [pc, #528]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d66:	4a83      	ldr	r2, [pc, #524]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	e007      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004d70:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d78:	4a7f      	ldr	r2, [pc, #508]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004d80:	4b7b      	ldr	r3, [pc, #492]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	0e1b      	lsrs	r3, r3, #24
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004d8e:	4b78      	ldr	r3, [pc, #480]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	099b      	lsrs	r3, r3, #6
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	fb03 f202 	mul.w	r2, r3, r2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004da8:	4b71      	ldr	r3, [pc, #452]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	3301      	adds	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]
        break;
 8004dc2:	e03b      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d108      	bne.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd0:	4b67      	ldr	r3, [pc, #412]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd8:	4a66      	ldr	r2, [pc, #408]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	e007      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004de2:	4b63      	ldr	r3, [pc, #396]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dea:	4a63      	ldr	r2, [pc, #396]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004df2:	4b5f      	ldr	r3, [pc, #380]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df8:	0e1b      	lsrs	r3, r3, #24
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004e00:	4b5b      	ldr	r3, [pc, #364]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	fb03 f202 	mul.w	r2, r3, r2
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004e1a:	4b55      	ldr	r3, [pc, #340]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
        break;
 8004e32:	e003      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e34:	4b51      	ldr	r3, [pc, #324]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004e36:	617b      	str	r3, [r7, #20]
        break;
 8004e38:	e000      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8004e3a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e42:	f040 808d 	bne.w	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004e46:	4b4a      	ldr	r3, [pc, #296]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e54:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e5c:	d07c      	beq.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e64:	d87b      	bhi.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e72:	d039      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004e74:	e073      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004e76:	4b3e      	ldr	r3, [pc, #248]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e82:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8a:	4a3a      	ldr	r2, [pc, #232]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	e007      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9c:	4a36      	ldr	r2, [pc, #216]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004ea4:	4b32      	ldr	r3, [pc, #200]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	0e1b      	lsrs	r3, r3, #24
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004eb2:	4b2f      	ldr	r3, [pc, #188]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	fb03 f202 	mul.w	r2, r3, r2
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004ecc:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]
        break;
 8004ee6:	e03b      	b.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004ee8:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d108      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004efc:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e007      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0e:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004f16:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1c:	0e1b      	lsrs	r3, r3, #24
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004f24:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2a:	099b      	lsrs	r3, r3, #6
 8004f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	fb03 f202 	mul.w	r2, r3, r2
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	3301      	adds	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]
        break;
 8004f56:	e003      	b.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004f5a:	617b      	str	r3, [r7, #20]
        break;
 8004f5c:	e000      	b.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8004f5e:	bf00      	nop
      }
    }
  }

  return frequency;
 8004f60:	697b      	ldr	r3, [r7, #20]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	00f42400 	.word	0x00f42400
 8004f78:	007a1200 	.word	0x007a1200
 8004f7c:	00bb8000 	.word	0x00bb8000

08004f80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e156      	b.n	800524c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc fad8 	bl	8001568 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fc21 	bl	8005808 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_SAI_Init+0x68>
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d80d      	bhi.n	8004fee <HAL_SAI_Init+0x6e>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_SAI_Init+0x5c>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d003      	beq.n	8004fe2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004fda:	e008      	b.n	8004fee <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      break;
 8004fe0:	e006      	b.n	8004ff0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	61fb      	str	r3, [r7, #28]
      break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004fe8:	2320      	movs	r3, #32
 8004fea:	61fb      	str	r3, [r7, #28]
      break;
 8004fec:	e000      	b.n	8004ff0 <HAL_SAI_Init+0x70>
      break;
 8004fee:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d81e      	bhi.n	8005036 <HAL_SAI_Init+0xb6>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <HAL_SAI_Init+0x80>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005011 	.word	0x08005011
 8005004:	08005017 	.word	0x08005017
 8005008:	0800501f 	.word	0x0800501f
 800500c:	08005027 	.word	0x08005027
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
    }
    break;
 8005014:	e010      	b.n	8005038 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501a:	617b      	str	r3, [r7, #20]
    }
    break;
 800501c:	e00c      	b.n	8005038 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800501e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005022:	617b      	str	r3, [r7, #20]
    }
    break;
 8005024:	e008      	b.n	8005038 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800502a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005034:	e000      	b.n	8005038 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005036:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a85      	ldr	r2, [pc, #532]	; (8005254 <HAL_SAI_Init+0x2d4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_SAI_Init+0xcc>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a84      	ldr	r2, [pc, #528]	; (8005258 <HAL_SAI_Init+0x2d8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800504c:	4a83      	ldr	r2, [pc, #524]	; (800525c <HAL_SAI_Init+0x2dc>)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e002      	b.n	800505a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005054:	4a82      	ldr	r2, [pc, #520]	; (8005260 <HAL_SAI_Init+0x2e0>)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d04c      	beq.n	80050fc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a7a      	ldr	r2, [pc, #488]	; (8005254 <HAL_SAI_Init+0x2d4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <HAL_SAI_Init+0xfa>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a78      	ldr	r2, [pc, #480]	; (8005258 <HAL_SAI_Init+0x2d8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d104      	bne.n	8005084 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800507a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800507e:	f7ff fe3f 	bl	8004d00 <HAL_RCCEx_GetPeriphCLKFreq>
 8005082:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a76      	ldr	r2, [pc, #472]	; (8005264 <HAL_SAI_Init+0x2e4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_SAI_Init+0x118>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a75      	ldr	r2, [pc, #468]	; (8005268 <HAL_SAI_Init+0x2e8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d104      	bne.n	80050a2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005098:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800509c:	f7ff fe30 	bl	8004d00 <HAL_RCCEx_GetPeriphCLKFreq>
 80050a0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	461a      	mov	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	025b      	lsls	r3, r3, #9
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a6b      	ldr	r2, [pc, #428]	; (800526c <HAL_SAI_Init+0x2ec>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	08da      	lsrs	r2, r3, #3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	4b68      	ldr	r3, [pc, #416]	; (800526c <HAL_SAI_Init+0x2ec>)
 80050cc:	fba3 2301 	umull	r2, r3, r3, r1
 80050d0:	08da      	lsrs	r2, r3, #3
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	1aca      	subs	r2, r1, r3
 80050dc:	2a08      	cmp	r2, #8
 80050de:	d904      	bls.n	80050ea <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d104      	bne.n	80050fc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	085a      	lsrs	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_SAI_Init+0x18c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d109      	bne.n	8005120 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_SAI_Init+0x198>
 8005114:	2300      	movs	r3, #0
 8005116:	e001      	b.n	800511c <HAL_SAI_Init+0x19c>
 8005118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	e008      	b.n	8005132 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d102      	bne.n	800512e <HAL_SAI_Init+0x1ae>
 8005128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800512c:	e000      	b.n	8005130 <HAL_SAI_Init+0x1b0>
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b4c      	ldr	r3, [pc, #304]	; (8005270 <HAL_SAI_Init+0x2f0>)
 800513e:	400b      	ands	r3, r1
 8005140:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6819      	ldr	r1, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005156:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	431a      	orrs	r2, r3
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800516a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005176:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <HAL_SAI_Init+0x2f4>)
 8005194:	400b      	ands	r3, r1
 8005196:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6899      	ldr	r1, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <HAL_SAI_Init+0x2f8>)
 80051c2:	400b      	ands	r3, r1
 80051c4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6899      	ldr	r1, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80051d6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80051dc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80051e2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	3b01      	subs	r3, #1
 80051ea:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80051ec:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68d9      	ldr	r1, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005204:	400b      	ands	r3, r1
 8005206:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68d9      	ldr	r1, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005224:	3b01      	subs	r3, #1
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40015804 	.word	0x40015804
 8005258:	40015824 	.word	0x40015824
 800525c:	40015800 	.word	0x40015800
 8005260:	40015c00 	.word	0x40015c00
 8005264:	40015c04 	.word	0x40015c04
 8005268:	40015c24 	.word	0x40015c24
 800526c:	cccccccd 	.word	0xcccccccd
 8005270:	ff05c010 	.word	0xff05c010
 8005274:	ffff1ff0 	.word	0xffff1ff0
 8005278:	fff88000 	.word	0xfff88000

0800527c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_SAI_Abort+0x1a>
 8005292:	2302      	movs	r3, #2
 8005294:	e072      	b.n	800537c <HAL_SAI_Abort+0x100>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ac:	d149      	bne.n	8005342 <HAL_SAI_Abort+0xc6>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80052bc:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01c      	beq.n	8005300 <HAL_SAI_Abort+0x84>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b12      	cmp	r3, #18
 80052d0:	d116      	bne.n	8005300 <HAL_SAI_Abort+0x84>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fd f996 	bl	8002608 <HAL_DMA_Abort>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <HAL_SAI_Abort+0x84>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	2b80      	cmp	r3, #128	; 0x80
 80052ea:	d009      	beq.n	8005300 <HAL_SAI_Abort+0x84>
        {
          status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01c      	beq.n	8005342 <HAL_SAI_Abort+0xc6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b22      	cmp	r3, #34	; 0x22
 8005312:	d116      	bne.n	8005342 <HAL_SAI_Abort+0xc6>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4618      	mov	r0, r3
 800531a:	f7fd f975 	bl	8002608 <HAL_DMA_Abort>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <HAL_SAI_Abort+0xc6>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d009      	beq.n	8005342 <HAL_SAI_Abort+0xc6>
        {
          status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005338:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2200      	movs	r2, #0
 8005348:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f04f 32ff 	mov.w	r2, #4294967295
 8005352:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa57 	bl	8005808 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0208 	orr.w	r2, r2, #8
 8005368:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005392:	f7fc faef 	bl	8001974 <HAL_GetTick>
 8005396:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_SAI_Transmit_DMA+0x20>
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e093      	b.n	80054d0 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 808c 	bne.w	80054ce <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_SAI_Transmit_DMA+0x40>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e085      	b.n	80054d0 <HAL_SAI_Transmit_DMA+0x14c>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	88fa      	ldrh	r2, [r7, #6]
 80053de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2212      	movs	r2, #18
 80053ee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f6:	4a38      	ldr	r2, [pc, #224]	; (80054d8 <HAL_SAI_Transmit_DMA+0x154>)
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fe:	4a37      	ldr	r2, [pc, #220]	; (80054dc <HAL_SAI_Transmit_DMA+0x158>)
 8005400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005406:	4a36      	ldr	r2, [pc, #216]	; (80054e0 <HAL_SAI_Transmit_DMA+0x15c>)
 8005408:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540e:	2200      	movs	r2, #0
 8005410:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800541a:	4619      	mov	r1, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	331c      	adds	r3, #28
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800542a:	f7fd f88d 	bl	8002548 <HAL_DMA_Start_IT>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e047      	b.n	80054d0 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005440:	2100      	movs	r1, #0
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f9aa 	bl	800579c <SAI_InterruptFlag>
 8005448:	4601      	mov	r1, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005466:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005468:	e015      	b.n	8005496 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800546a:	f7fc fa83 	bl	8001974 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005478:	d90d      	bls.n	8005496 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005480:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e01c      	b.n	80054d0 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0e2      	beq.n	800546a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80054c0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e000      	b.n	80054d0 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80054ce:	2302      	movs	r3, #2
  }
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	080058d9 	.word	0x080058d9
 80054dc:	08005879 	.word	0x08005879
 80054e0:	080058f5 	.word	0x080058f5

080054e4 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8137 	beq.w	8005768 <HAL_SAI_IRQHandler+0x284>
  {
    uint32_t itflags = hsai->Instance->SR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <HAL_SAI_IRQHandler+0x4c>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
 800552e:	e11b      	b.n	8005768 <HAL_SAI_IRQHandler+0x284>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01e      	beq.n	8005578 <HAL_SAI_IRQHandler+0x94>
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d019      	beq.n	8005578 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b22      	cmp	r3, #34	; 0x22
 8005556:	d101      	bne.n	800555c <HAL_SAI_IRQHandler+0x78>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <HAL_SAI_IRQHandler+0x7a>
 800555c:	2302      	movs	r3, #2
 800555e:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f909 	bl	8005788 <HAL_SAI_ErrorCallback>
 8005576:	e0f7      	b.n	8005768 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d011      	beq.n	80055a6 <HAL_SAI_IRQHandler+0xc2>
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00c      	beq.n	80055a6 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2202      	movs	r2, #2
 8005592:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80e5 	beq.w	8005768 <HAL_SAI_IRQHandler+0x284>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a2:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 80055a4:	e0e0      	b.n	8005768 <HAL_SAI_IRQHandler+0x284>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d039      	beq.n	8005624 <HAL_SAI_IRQHandler+0x140>
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d034      	beq.n	8005624 <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2220      	movs	r2, #32
 80055c0:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c8:	f043 0204 	orr.w	r2, r3, #4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01c      	beq.n	8005616 <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d009      	beq.n	80055f8 <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e8:	4a61      	ldr	r2, [pc, #388]	; (8005770 <HAL_SAI_IRQHandler+0x28c>)
 80055ea:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fd f879 	bl	80026e8 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055f6:	e0b4      	b.n	8005762 <HAL_SAI_IRQHandler+0x27e>
        }
        else if (hsai->hdmarx != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b0 	beq.w	8005762 <HAL_SAI_IRQHandler+0x27e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a5a      	ldr	r2, [pc, #360]	; (8005770 <HAL_SAI_IRQHandler+0x28c>)
 8005608:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd f86a 	bl	80026e8 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005614:	e0a5      	b.n	8005762 <HAL_SAI_IRQHandler+0x27e>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fe30 	bl	800527c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8b3 	bl	8005788 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005622:	e09e      	b.n	8005762 <HAL_SAI_IRQHandler+0x27e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d038      	beq.n	80056a0 <HAL_SAI_IRQHandler+0x1bc>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	d033      	beq.n	80056a0 <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2240      	movs	r2, #64	; 0x40
 800563e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005646:	f043 0208 	orr.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01b      	beq.n	8005692 <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005666:	4a42      	ldr	r2, [pc, #264]	; (8005770 <HAL_SAI_IRQHandler+0x28c>)
 8005668:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566e:	4618      	mov	r0, r3
 8005670:	f7fd f83a 	bl	80026e8 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005674:	e077      	b.n	8005766 <HAL_SAI_IRQHandler+0x282>
        }
        else if (hsai->hdmarx != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	2b00      	cmp	r3, #0
 800567c:	d073      	beq.n	8005766 <HAL_SAI_IRQHandler+0x282>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a3b      	ldr	r2, [pc, #236]	; (8005770 <HAL_SAI_IRQHandler+0x28c>)
 8005684:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4618      	mov	r0, r3
 800568c:	f7fd f82c 	bl	80026e8 <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005690:	e069      	b.n	8005766 <HAL_SAI_IRQHandler+0x282>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fdf2 	bl	800527c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f875 	bl	8005788 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800569e:	e062      	b.n	8005766 <HAL_SAI_IRQHandler+0x282>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d041      	beq.n	800572e <HAL_SAI_IRQHandler+0x24a>
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d03c      	beq.n	800572e <HAL_SAI_IRQHandler+0x24a>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2204      	movs	r2, #4
 80056ba:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <HAL_SAI_IRQHandler+0x204>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d8:	4a25      	ldr	r2, [pc, #148]	; (8005770 <HAL_SAI_IRQHandler+0x28c>)
 80056da:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fd f801 	bl	80026e8 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 80056e6:	e03f      	b.n	8005768 <HAL_SAI_IRQHandler+0x284>
      }
      else if (hsai->hdmarx != NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d009      	beq.n	8005704 <HAL_SAI_IRQHandler+0x220>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <HAL_SAI_IRQHandler+0x28c>)
 80056f6:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fc fff3 	bl	80026e8 <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 8005702:	e031      	b.n	8005768 <HAL_SAI_IRQHandler+0x284>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2200      	movs	r2, #0
 800570a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f82e 	bl	8005788 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 800572c:	e01c      	b.n	8005768 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <HAL_SAI_IRQHandler+0x284>
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	d012      	beq.n	8005768 <HAL_SAI_IRQHandler+0x284>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2210      	movs	r2, #16
 8005748:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005750:	f043 0210 	orr.w	r2, r3, #16
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f814 	bl	8005788 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005760:	e002      	b.n	8005768 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005766:	bf00      	nop
}
 8005768:	bf00      	nop
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	0800595b 	.word	0x0800595b

08005774 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d103      	bne.n	80057b8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f043 0308 	orr.w	r3, r3, #8
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d10b      	bne.n	80057d8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d003      	beq.n	80057d0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d103      	bne.n	80057d8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f043 0310 	orr.w	r3, r3, #16
 80057d6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d003      	beq.n	80057e8 <SAI_InterruptFlag+0x4c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d104      	bne.n	80057f2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e003      	b.n	80057fa <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f043 0304 	orr.w	r3, r3, #4
 80057f8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80057fa:	68fb      	ldr	r3, [r7, #12]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <SAI_Disable+0x68>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a17      	ldr	r2, [pc, #92]	; (8005874 <SAI_Disable+0x6c>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	0b1b      	lsrs	r3, r3, #12
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005832:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1e5a      	subs	r2, r3, #1
 8005838:	60fa      	str	r2, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005844:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	72fb      	strb	r3, [r7, #11]
      break;
 8005852:	e006      	b.n	8005862 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e8      	bne.n	8005834 <SAI_Disable+0x2c>

  return status;
 8005862:	7afb      	ldrb	r3, [r7, #11]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000004 	.word	0x20000004
 8005874:	95cbec1b 	.word	0x95cbec1b

08005878 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588e:	d01c      	beq.n	80058ca <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80058a6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80058a8:	2100      	movs	r1, #0
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff ff76 	bl	800579c <SAI_InterruptFlag>
 80058b0:	4603      	mov	r3, r0
 80058b2:	43d9      	mvns	r1, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	400a      	ands	r2, r1
 80058c0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7fa fea8 	bl	8000620 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff ff44 	bl	8005774 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005908:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	2b01      	cmp	r3, #1
 800591a:	d004      	beq.n	8005926 <SAI_DMAError+0x32>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	2b01      	cmp	r3, #1
 8005924:	d112      	bne.n	800594c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005934:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff ff66 	bl	8005808 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f7ff ff1b 	bl	8005788 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005976:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f04f 32ff 	mov.w	r2, #4294967295
 8005988:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005990:	2b20      	cmp	r3, #32
 8005992:	d00a      	beq.n	80059aa <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff ff37 	bl	8005808 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0208 	orr.w	r2, r2, #8
 80059a8:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff fee4 	bl	8005788 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e040      	b.n	8005a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fb fcda 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fbe6 	bl	80061d8 <UART_SetConfig>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e022      	b.n	8005a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fe3e 	bl	80066a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fec5 	bl	80067e4 <UART_CheckIdleState>
 8005a5a:	4603      	mov	r3, r0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d171      	bne.n	8005b60 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_UART_Transmit+0x24>
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e06a      	b.n	8005b62 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2221      	movs	r2, #33	; 0x21
 8005a98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a9a:	f7fb ff6b 	bl	8001974 <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab8:	d108      	bne.n	8005acc <HAL_UART_Transmit+0x68>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e003      	b.n	8005ad4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ad4:	e02c      	b.n	8005b30 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 feb6 	bl	8006852 <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e038      	b.n	8005b62 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	3302      	adds	r3, #2
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e007      	b.n	8005b1e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1cc      	bne.n	8005ad6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2200      	movs	r2, #0
 8005b44:	2140      	movs	r1, #64	; 0x40
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fe83 	bl	8006852 <UART_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e005      	b.n	8005b62 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e000      	b.n	8005b62 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b60:	2302      	movs	r3, #2
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b08a      	sub	sp, #40	; 0x28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d132      	bne.n	8005be8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <HAL_UART_Receive_IT+0x24>
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e02b      	b.n	8005bea <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	69f9      	ldr	r1, [r7, #28]
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e6      	bne.n	8005ba6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bd8:	88fb      	ldrh	r3, [r7, #6]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fefe 	bl	80069e0 <UART_Start_Receive_IT>
 8005be4:	4603      	mov	r3, r0
 8005be6:	e000      	b.n	8005bea <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3728      	adds	r7, #40	; 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b0ba      	sub	sp, #232	; 0xe8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c22:	4013      	ands	r3, r2
 8005c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d115      	bne.n	8005c5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8297 	beq.w	8006180 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
      }
      return;
 8005c5a:	e291      	b.n	8006180 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8117 	beq.w	8005e94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c76:	4b85      	ldr	r3, [pc, #532]	; (8005e8c <HAL_UART_IRQHandler+0x298>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 810a 	beq.w	8005e94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d011      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xbc>
 8005c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d011      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xec>
 8005cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d011      	beq.n	8005d10 <HAL_UART_IRQHandler+0x11c>
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d42:	f043 0208 	orr.w	r2, r3, #8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <HAL_UART_IRQHandler+0x18a>
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d74:	f043 0220 	orr.w	r2, r3, #32
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 81fd 	beq.w	8006184 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d005      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d04f      	beq.n	8005e76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fec8 	bl	8006b6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d141      	bne.n	8005e6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1d9      	bne.n	8005dea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d013      	beq.n	8005e66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e42:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <HAL_UART_IRQHandler+0x29c>)
 8005e44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fc fc4c 	bl	80026e8 <HAL_DMA_Abort_IT>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d017      	beq.n	8005e86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e60:	4610      	mov	r0, r2
 8005e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	e00f      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9a0 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	e00b      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f99c 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	e007      	b.n	8005e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f998 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005e84:	e17e      	b.n	8006184 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e86:	bf00      	nop
    return;
 8005e88:	e17c      	b.n	8006184 <HAL_UART_IRQHandler+0x590>
 8005e8a:	bf00      	nop
 8005e8c:	04000120 	.word	0x04000120
 8005e90:	08006c35 	.word	0x08006c35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	f040 814c 	bne.w	8006136 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8145 	beq.w	8006136 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 813e 	beq.w	8006136 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	f040 80b6 	bne.w	800603e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ede:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8150 	beq.w	8006188 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	f080 8148 	bcs.w	8006188 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005efe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0c:	f000 8086 	beq.w	800601c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1da      	bne.n	8005f10 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e1      	bne.n	8005f5a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fec:	f023 0310 	bic.w	r3, r3, #16
 8005ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006000:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800600c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e4      	bne.n	8005fdc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006016:	4618      	mov	r0, r3
 8006018:	f7fc faf6 	bl	8002608 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800602e:	b29b      	uxth	r3, r3
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8c2 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800603c:	e0a4      	b.n	8006188 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800604a:	b29b      	uxth	r3, r3
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 8096 	beq.w	800618c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8091 	beq.w	800618c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800607e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800608c:	647b      	str	r3, [r7, #68]	; 0x44
 800608e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e4      	bne.n	800606a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3308      	adds	r3, #8
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	623b      	str	r3, [r7, #32]
   return(result);
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3308      	adds	r3, #8
 80060c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060c4:	633a      	str	r2, [r7, #48]	; 0x30
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e3      	bne.n	80060a0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f023 0310 	bic.w	r3, r3, #16
 8006100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	69b9      	ldr	r1, [r7, #24]
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	617b      	str	r3, [r7, #20]
   return(result);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e4      	bne.n	80060ec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800612c:	4619      	mov	r1, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f846 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006134:	e02a      	b.n	800618c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00e      	beq.n	8006160 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d01c      	beq.n	8006190 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
    }
    return;
 800615e:	e017      	b.n	8006190 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d012      	beq.n	8006192 <HAL_UART_IRQHandler+0x59e>
 800616c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00c      	beq.n	8006192 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fd71 	bl	8006c60 <UART_EndTransmit_IT>
    return;
 800617e:	e008      	b.n	8006192 <HAL_UART_IRQHandler+0x59e>
      return;
 8006180:	bf00      	nop
 8006182:	e006      	b.n	8006192 <HAL_UART_IRQHandler+0x59e>
    return;
 8006184:	bf00      	nop
 8006186:	e004      	b.n	8006192 <HAL_UART_IRQHandler+0x59e>
      return;
 8006188:	bf00      	nop
 800618a:	e002      	b.n	8006192 <HAL_UART_IRQHandler+0x59e>
      return;
 800618c:	bf00      	nop
 800618e:	e000      	b.n	8006192 <HAL_UART_IRQHandler+0x59e>
    return;
 8006190:	bf00      	nop
  }

}
 8006192:	37e8      	adds	r7, #232	; 0xe8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4ba6      	ldr	r3, [pc, #664]	; (800649c <UART_SetConfig+0x2c4>)
 8006204:	4013      	ands	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	6979      	ldr	r1, [r7, #20]
 800620c:	430b      	orrs	r3, r1
 800620e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	430a      	orrs	r2, r1
 8006248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a94      	ldr	r2, [pc, #592]	; (80064a0 <UART_SetConfig+0x2c8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d120      	bne.n	8006296 <UART_SetConfig+0xbe>
 8006254:	4b93      	ldr	r3, [pc, #588]	; (80064a4 <UART_SetConfig+0x2cc>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b03      	cmp	r3, #3
 8006260:	d816      	bhi.n	8006290 <UART_SetConfig+0xb8>
 8006262:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <UART_SetConfig+0x90>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	08006279 	.word	0x08006279
 800626c:	08006285 	.word	0x08006285
 8006270:	0800627f 	.word	0x0800627f
 8006274:	0800628b 	.word	0x0800628b
 8006278:	2301      	movs	r3, #1
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e150      	b.n	8006520 <UART_SetConfig+0x348>
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e14d      	b.n	8006520 <UART_SetConfig+0x348>
 8006284:	2304      	movs	r3, #4
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e14a      	b.n	8006520 <UART_SetConfig+0x348>
 800628a:	2308      	movs	r3, #8
 800628c:	77fb      	strb	r3, [r7, #31]
 800628e:	e147      	b.n	8006520 <UART_SetConfig+0x348>
 8006290:	2310      	movs	r3, #16
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e144      	b.n	8006520 <UART_SetConfig+0x348>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a83      	ldr	r2, [pc, #524]	; (80064a8 <UART_SetConfig+0x2d0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d132      	bne.n	8006306 <UART_SetConfig+0x12e>
 80062a0:	4b80      	ldr	r3, [pc, #512]	; (80064a4 <UART_SetConfig+0x2cc>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f003 030c 	and.w	r3, r3, #12
 80062aa:	2b0c      	cmp	r3, #12
 80062ac:	d828      	bhi.n	8006300 <UART_SetConfig+0x128>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <UART_SetConfig+0xdc>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062e9 	.word	0x080062e9
 80062b8:	08006301 	.word	0x08006301
 80062bc:	08006301 	.word	0x08006301
 80062c0:	08006301 	.word	0x08006301
 80062c4:	080062f5 	.word	0x080062f5
 80062c8:	08006301 	.word	0x08006301
 80062cc:	08006301 	.word	0x08006301
 80062d0:	08006301 	.word	0x08006301
 80062d4:	080062ef 	.word	0x080062ef
 80062d8:	08006301 	.word	0x08006301
 80062dc:	08006301 	.word	0x08006301
 80062e0:	08006301 	.word	0x08006301
 80062e4:	080062fb 	.word	0x080062fb
 80062e8:	2300      	movs	r3, #0
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e118      	b.n	8006520 <UART_SetConfig+0x348>
 80062ee:	2302      	movs	r3, #2
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e115      	b.n	8006520 <UART_SetConfig+0x348>
 80062f4:	2304      	movs	r3, #4
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e112      	b.n	8006520 <UART_SetConfig+0x348>
 80062fa:	2308      	movs	r3, #8
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e10f      	b.n	8006520 <UART_SetConfig+0x348>
 8006300:	2310      	movs	r3, #16
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e10c      	b.n	8006520 <UART_SetConfig+0x348>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a68      	ldr	r2, [pc, #416]	; (80064ac <UART_SetConfig+0x2d4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d120      	bne.n	8006352 <UART_SetConfig+0x17a>
 8006310:	4b64      	ldr	r3, [pc, #400]	; (80064a4 <UART_SetConfig+0x2cc>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006316:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800631a:	2b30      	cmp	r3, #48	; 0x30
 800631c:	d013      	beq.n	8006346 <UART_SetConfig+0x16e>
 800631e:	2b30      	cmp	r3, #48	; 0x30
 8006320:	d814      	bhi.n	800634c <UART_SetConfig+0x174>
 8006322:	2b20      	cmp	r3, #32
 8006324:	d009      	beq.n	800633a <UART_SetConfig+0x162>
 8006326:	2b20      	cmp	r3, #32
 8006328:	d810      	bhi.n	800634c <UART_SetConfig+0x174>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <UART_SetConfig+0x15c>
 800632e:	2b10      	cmp	r3, #16
 8006330:	d006      	beq.n	8006340 <UART_SetConfig+0x168>
 8006332:	e00b      	b.n	800634c <UART_SetConfig+0x174>
 8006334:	2300      	movs	r3, #0
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e0f2      	b.n	8006520 <UART_SetConfig+0x348>
 800633a:	2302      	movs	r3, #2
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e0ef      	b.n	8006520 <UART_SetConfig+0x348>
 8006340:	2304      	movs	r3, #4
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e0ec      	b.n	8006520 <UART_SetConfig+0x348>
 8006346:	2308      	movs	r3, #8
 8006348:	77fb      	strb	r3, [r7, #31]
 800634a:	e0e9      	b.n	8006520 <UART_SetConfig+0x348>
 800634c:	2310      	movs	r3, #16
 800634e:	77fb      	strb	r3, [r7, #31]
 8006350:	e0e6      	b.n	8006520 <UART_SetConfig+0x348>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a56      	ldr	r2, [pc, #344]	; (80064b0 <UART_SetConfig+0x2d8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d120      	bne.n	800639e <UART_SetConfig+0x1c6>
 800635c:	4b51      	ldr	r3, [pc, #324]	; (80064a4 <UART_SetConfig+0x2cc>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006362:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006366:	2bc0      	cmp	r3, #192	; 0xc0
 8006368:	d013      	beq.n	8006392 <UART_SetConfig+0x1ba>
 800636a:	2bc0      	cmp	r3, #192	; 0xc0
 800636c:	d814      	bhi.n	8006398 <UART_SetConfig+0x1c0>
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	d009      	beq.n	8006386 <UART_SetConfig+0x1ae>
 8006372:	2b80      	cmp	r3, #128	; 0x80
 8006374:	d810      	bhi.n	8006398 <UART_SetConfig+0x1c0>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <UART_SetConfig+0x1a8>
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d006      	beq.n	800638c <UART_SetConfig+0x1b4>
 800637e:	e00b      	b.n	8006398 <UART_SetConfig+0x1c0>
 8006380:	2300      	movs	r3, #0
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e0cc      	b.n	8006520 <UART_SetConfig+0x348>
 8006386:	2302      	movs	r3, #2
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e0c9      	b.n	8006520 <UART_SetConfig+0x348>
 800638c:	2304      	movs	r3, #4
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e0c6      	b.n	8006520 <UART_SetConfig+0x348>
 8006392:	2308      	movs	r3, #8
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e0c3      	b.n	8006520 <UART_SetConfig+0x348>
 8006398:	2310      	movs	r3, #16
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e0c0      	b.n	8006520 <UART_SetConfig+0x348>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a44      	ldr	r2, [pc, #272]	; (80064b4 <UART_SetConfig+0x2dc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d125      	bne.n	80063f4 <UART_SetConfig+0x21c>
 80063a8:	4b3e      	ldr	r3, [pc, #248]	; (80064a4 <UART_SetConfig+0x2cc>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b6:	d017      	beq.n	80063e8 <UART_SetConfig+0x210>
 80063b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063bc:	d817      	bhi.n	80063ee <UART_SetConfig+0x216>
 80063be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c2:	d00b      	beq.n	80063dc <UART_SetConfig+0x204>
 80063c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c8:	d811      	bhi.n	80063ee <UART_SetConfig+0x216>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <UART_SetConfig+0x1fe>
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d2:	d006      	beq.n	80063e2 <UART_SetConfig+0x20a>
 80063d4:	e00b      	b.n	80063ee <UART_SetConfig+0x216>
 80063d6:	2300      	movs	r3, #0
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e0a1      	b.n	8006520 <UART_SetConfig+0x348>
 80063dc:	2302      	movs	r3, #2
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e09e      	b.n	8006520 <UART_SetConfig+0x348>
 80063e2:	2304      	movs	r3, #4
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	e09b      	b.n	8006520 <UART_SetConfig+0x348>
 80063e8:	2308      	movs	r3, #8
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e098      	b.n	8006520 <UART_SetConfig+0x348>
 80063ee:	2310      	movs	r3, #16
 80063f0:	77fb      	strb	r3, [r7, #31]
 80063f2:	e095      	b.n	8006520 <UART_SetConfig+0x348>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a2f      	ldr	r2, [pc, #188]	; (80064b8 <UART_SetConfig+0x2e0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d125      	bne.n	800644a <UART_SetConfig+0x272>
 80063fe:	4b29      	ldr	r3, [pc, #164]	; (80064a4 <UART_SetConfig+0x2cc>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800640c:	d017      	beq.n	800643e <UART_SetConfig+0x266>
 800640e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006412:	d817      	bhi.n	8006444 <UART_SetConfig+0x26c>
 8006414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006418:	d00b      	beq.n	8006432 <UART_SetConfig+0x25a>
 800641a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641e:	d811      	bhi.n	8006444 <UART_SetConfig+0x26c>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <UART_SetConfig+0x254>
 8006424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006428:	d006      	beq.n	8006438 <UART_SetConfig+0x260>
 800642a:	e00b      	b.n	8006444 <UART_SetConfig+0x26c>
 800642c:	2301      	movs	r3, #1
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e076      	b.n	8006520 <UART_SetConfig+0x348>
 8006432:	2302      	movs	r3, #2
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e073      	b.n	8006520 <UART_SetConfig+0x348>
 8006438:	2304      	movs	r3, #4
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e070      	b.n	8006520 <UART_SetConfig+0x348>
 800643e:	2308      	movs	r3, #8
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e06d      	b.n	8006520 <UART_SetConfig+0x348>
 8006444:	2310      	movs	r3, #16
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e06a      	b.n	8006520 <UART_SetConfig+0x348>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1b      	ldr	r2, [pc, #108]	; (80064bc <UART_SetConfig+0x2e4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d138      	bne.n	80064c6 <UART_SetConfig+0x2ee>
 8006454:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <UART_SetConfig+0x2cc>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800645e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006462:	d017      	beq.n	8006494 <UART_SetConfig+0x2bc>
 8006464:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006468:	d82a      	bhi.n	80064c0 <UART_SetConfig+0x2e8>
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646e:	d00b      	beq.n	8006488 <UART_SetConfig+0x2b0>
 8006470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006474:	d824      	bhi.n	80064c0 <UART_SetConfig+0x2e8>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <UART_SetConfig+0x2aa>
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	d006      	beq.n	800648e <UART_SetConfig+0x2b6>
 8006480:	e01e      	b.n	80064c0 <UART_SetConfig+0x2e8>
 8006482:	2300      	movs	r3, #0
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e04b      	b.n	8006520 <UART_SetConfig+0x348>
 8006488:	2302      	movs	r3, #2
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e048      	b.n	8006520 <UART_SetConfig+0x348>
 800648e:	2304      	movs	r3, #4
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e045      	b.n	8006520 <UART_SetConfig+0x348>
 8006494:	2308      	movs	r3, #8
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e042      	b.n	8006520 <UART_SetConfig+0x348>
 800649a:	bf00      	nop
 800649c:	efff69f3 	.word	0xefff69f3
 80064a0:	40011000 	.word	0x40011000
 80064a4:	40023800 	.word	0x40023800
 80064a8:	40004400 	.word	0x40004400
 80064ac:	40004800 	.word	0x40004800
 80064b0:	40004c00 	.word	0x40004c00
 80064b4:	40005000 	.word	0x40005000
 80064b8:	40011400 	.word	0x40011400
 80064bc:	40007800 	.word	0x40007800
 80064c0:	2310      	movs	r3, #16
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e02c      	b.n	8006520 <UART_SetConfig+0x348>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a72      	ldr	r2, [pc, #456]	; (8006694 <UART_SetConfig+0x4bc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d125      	bne.n	800651c <UART_SetConfig+0x344>
 80064d0:	4b71      	ldr	r3, [pc, #452]	; (8006698 <UART_SetConfig+0x4c0>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064de:	d017      	beq.n	8006510 <UART_SetConfig+0x338>
 80064e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064e4:	d817      	bhi.n	8006516 <UART_SetConfig+0x33e>
 80064e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ea:	d00b      	beq.n	8006504 <UART_SetConfig+0x32c>
 80064ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f0:	d811      	bhi.n	8006516 <UART_SetConfig+0x33e>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <UART_SetConfig+0x326>
 80064f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064fa:	d006      	beq.n	800650a <UART_SetConfig+0x332>
 80064fc:	e00b      	b.n	8006516 <UART_SetConfig+0x33e>
 80064fe:	2300      	movs	r3, #0
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e00d      	b.n	8006520 <UART_SetConfig+0x348>
 8006504:	2302      	movs	r3, #2
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e00a      	b.n	8006520 <UART_SetConfig+0x348>
 800650a:	2304      	movs	r3, #4
 800650c:	77fb      	strb	r3, [r7, #31]
 800650e:	e007      	b.n	8006520 <UART_SetConfig+0x348>
 8006510:	2308      	movs	r3, #8
 8006512:	77fb      	strb	r3, [r7, #31]
 8006514:	e004      	b.n	8006520 <UART_SetConfig+0x348>
 8006516:	2310      	movs	r3, #16
 8006518:	77fb      	strb	r3, [r7, #31]
 800651a:	e001      	b.n	8006520 <UART_SetConfig+0x348>
 800651c:	2310      	movs	r3, #16
 800651e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006528:	d15b      	bne.n	80065e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800652a:	7ffb      	ldrb	r3, [r7, #31]
 800652c:	2b08      	cmp	r3, #8
 800652e:	d828      	bhi.n	8006582 <UART_SetConfig+0x3aa>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x360>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006565 	.word	0x08006565
 8006540:	0800656d 	.word	0x0800656d
 8006544:	08006583 	.word	0x08006583
 8006548:	08006573 	.word	0x08006573
 800654c:	08006583 	.word	0x08006583
 8006550:	08006583 	.word	0x08006583
 8006554:	08006583 	.word	0x08006583
 8006558:	0800657b 	.word	0x0800657b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800655c:	f7fd ffb8 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8006560:	61b8      	str	r0, [r7, #24]
        break;
 8006562:	e013      	b.n	800658c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006564:	f7fd ffc8 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 8006568:	61b8      	str	r0, [r7, #24]
        break;
 800656a:	e00f      	b.n	800658c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800656c:	4b4b      	ldr	r3, [pc, #300]	; (800669c <UART_SetConfig+0x4c4>)
 800656e:	61bb      	str	r3, [r7, #24]
        break;
 8006570:	e00c      	b.n	800658c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006572:	f7fd fe9b 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8006576:	61b8      	str	r0, [r7, #24]
        break;
 8006578:	e008      	b.n	800658c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657e:	61bb      	str	r3, [r7, #24]
        break;
 8006580:	e004      	b.n	800658c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	77bb      	strb	r3, [r7, #30]
        break;
 800658a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d074      	beq.n	800667c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	005a      	lsls	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	441a      	add	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b0f      	cmp	r3, #15
 80065ac:	d916      	bls.n	80065dc <UART_SetConfig+0x404>
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b4:	d212      	bcs.n	80065dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f023 030f 	bic.w	r3, r3, #15
 80065be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	89fb      	ldrh	r3, [r7, #14]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	89fa      	ldrh	r2, [r7, #14]
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e04f      	b.n	800667c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	77bb      	strb	r3, [r7, #30]
 80065e0:	e04c      	b.n	800667c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065e2:	7ffb      	ldrb	r3, [r7, #31]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d828      	bhi.n	800663a <UART_SetConfig+0x462>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <UART_SetConfig+0x418>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006615 	.word	0x08006615
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006625 	.word	0x08006625
 80065fc:	0800663b 	.word	0x0800663b
 8006600:	0800662b 	.word	0x0800662b
 8006604:	0800663b 	.word	0x0800663b
 8006608:	0800663b 	.word	0x0800663b
 800660c:	0800663b 	.word	0x0800663b
 8006610:	08006633 	.word	0x08006633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006614:	f7fd ff5c 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8006618:	61b8      	str	r0, [r7, #24]
        break;
 800661a:	e013      	b.n	8006644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800661c:	f7fd ff6c 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 8006620:	61b8      	str	r0, [r7, #24]
        break;
 8006622:	e00f      	b.n	8006644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006624:	4b1d      	ldr	r3, [pc, #116]	; (800669c <UART_SetConfig+0x4c4>)
 8006626:	61bb      	str	r3, [r7, #24]
        break;
 8006628:	e00c      	b.n	8006644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800662a:	f7fd fe3f 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 800662e:	61b8      	str	r0, [r7, #24]
        break;
 8006630:	e008      	b.n	8006644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006636:	61bb      	str	r3, [r7, #24]
        break;
 8006638:	e004      	b.n	8006644 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	77bb      	strb	r3, [r7, #30]
        break;
 8006642:	bf00      	nop
    }

    if (pclk != 0U)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d018      	beq.n	800667c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	085a      	lsrs	r2, r3, #1
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	441a      	add	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b0f      	cmp	r3, #15
 8006662:	d909      	bls.n	8006678 <UART_SetConfig+0x4a0>
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666a:	d205      	bcs.n	8006678 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	b29a      	uxth	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	e001      	b.n	800667c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006688:	7fbb      	ldrb	r3, [r7, #30]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3720      	adds	r7, #32
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40007c00 	.word	0x40007c00
 8006698:	40023800 	.word	0x40023800
 800669c:	00f42400 	.word	0x00f42400

080066a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679e:	d10a      	bne.n	80067b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067f4:	f7fb f8be 	bl	8001974 <HAL_GetTick>
 80067f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b08      	cmp	r3, #8
 8006806:	d10e      	bne.n	8006826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f81b 	bl	8006852 <UART_WaitOnFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e011      	b.n	800684a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b09c      	sub	sp, #112	; 0x70
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	4613      	mov	r3, r2
 8006860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006862:	e0a7      	b.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	f000 80a3 	beq.w	80069b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686e:	f7fb f881 	bl	8001974 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <UART_WaitOnFlagUntilTimeout+0x32>
 800687e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006880:	2b00      	cmp	r3, #0
 8006882:	d13f      	bne.n	8006904 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006898:	667b      	str	r3, [r7, #100]	; 0x64
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e6      	bne.n	8006884 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	663b      	str	r3, [r7, #96]	; 0x60
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80068d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e068      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d050      	beq.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006920:	d148      	bne.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800692a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694a:	637b      	str	r3, [r7, #52]	; 0x34
 800694c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e6      	bne.n	800692c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	613b      	str	r3, [r7, #16]
   return(result);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	66bb      	str	r3, [r7, #104]	; 0x68
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3308      	adds	r3, #8
 800697c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800697e:	623a      	str	r2, [r7, #32]
 8006980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	69f9      	ldr	r1, [r7, #28]
 8006984:	6a3a      	ldr	r2, [r7, #32]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	61bb      	str	r3, [r7, #24]
   return(result);
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2220      	movs	r2, #32
 8006996:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e010      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	4013      	ands	r3, r2
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	bf0c      	ite	eq
 80069c4:	2301      	moveq	r3, #1
 80069c6:	2300      	movne	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	f43f af48 	beq.w	8006864 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3770      	adds	r7, #112	; 0x70
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b097      	sub	sp, #92	; 0x5c
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	88fa      	ldrh	r2, [r7, #6]
 80069f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a12:	d10e      	bne.n	8006a32 <UART_Start_Receive_IT+0x52>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d105      	bne.n	8006a28 <UART_Start_Receive_IT+0x48>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a26:	e02d      	b.n	8006a84 <UART_Start_Receive_IT+0xa4>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	22ff      	movs	r2, #255	; 0xff
 8006a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a30:	e028      	b.n	8006a84 <UART_Start_Receive_IT+0xa4>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10d      	bne.n	8006a56 <UART_Start_Receive_IT+0x76>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d104      	bne.n	8006a4c <UART_Start_Receive_IT+0x6c>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	22ff      	movs	r2, #255	; 0xff
 8006a46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a4a:	e01b      	b.n	8006a84 <UART_Start_Receive_IT+0xa4>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	227f      	movs	r2, #127	; 0x7f
 8006a50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a54:	e016      	b.n	8006a84 <UART_Start_Receive_IT+0xa4>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a5e:	d10d      	bne.n	8006a7c <UART_Start_Receive_IT+0x9c>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <UART_Start_Receive_IT+0x92>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	227f      	movs	r2, #127	; 0x7f
 8006a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a70:	e008      	b.n	8006a84 <UART_Start_Receive_IT+0xa4>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	223f      	movs	r2, #63	; 0x3f
 8006a76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a7a:	e003      	b.n	8006a84 <UART_Start_Receive_IT+0xa4>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2222      	movs	r2, #34	; 0x22
 8006a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ab4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ab6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad0:	d107      	bne.n	8006ae2 <UART_Start_Receive_IT+0x102>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <UART_Start_Receive_IT+0x184>)
 8006ade:	669a      	str	r2, [r3, #104]	; 0x68
 8006ae0:	e002      	b.n	8006ae8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <UART_Start_Receive_IT+0x188>)
 8006ae6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d019      	beq.n	8006b24 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e6      	bne.n	8006af0 <UART_Start_Receive_IT+0x110>
 8006b22:	e018      	b.n	8006b56 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	613b      	str	r3, [r7, #16]
   return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f043 0320 	orr.w	r3, r3, #32
 8006b38:	653b      	str	r3, [r7, #80]	; 0x50
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	69f9      	ldr	r1, [r7, #28]
 8006b48:	6a3a      	ldr	r2, [r7, #32]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e6      	bne.n	8006b24 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	375c      	adds	r7, #92	; 0x5c
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	08006e1b 	.word	0x08006e1b
 8006b68:	08006cb5 	.word	0x08006cb5

08006b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b095      	sub	sp, #84	; 0x54
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b92:	643b      	str	r3, [r7, #64]	; 0x40
 8006b94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e6      	bne.n	8006b74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3308      	adds	r3, #8
 8006bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f023 0301 	bic.w	r3, r3, #1
 8006bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e5      	bne.n	8006ba6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d118      	bne.n	8006c14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f023 0310 	bic.w	r3, r3, #16
 8006bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6979      	ldr	r1, [r7, #20]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c28:	bf00      	nop
 8006c2a:	3754      	adds	r7, #84	; 0x54
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7ff faaa 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	613b      	str	r3, [r7, #16]
   return(result);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e6      	bne.n	8006c68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fa76 	bl	8006198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cac:	bf00      	nop
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b096      	sub	sp, #88	; 0x58
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ccc:	2b22      	cmp	r3, #34	; 0x22
 8006cce:	f040 8098 	bne.w	8006e02 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cdc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ce0:	b2d9      	uxtb	r1, r3
 8006ce2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	400a      	ands	r2, r1
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d17b      	bne.n	8006e12 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d38:	647b      	str	r3, [r7, #68]	; 0x44
 8006d3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e6      	bne.n	8006d1a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3308      	adds	r3, #8
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d6c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e5      	bne.n	8006d4c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d12e      	bne.n	8006dfa <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0310 	bic.w	r3, r3, #16
 8006db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	69b9      	ldr	r1, [r7, #24]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e6      	bne.n	8006da2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	f003 0310 	and.w	r3, r3, #16
 8006dde:	2b10      	cmp	r3, #16
 8006de0:	d103      	bne.n	8006dea <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2210      	movs	r2, #16
 8006de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff f9e4 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006df8:	e00b      	b.n	8006e12 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7f9 fd84 	bl	8000908 <HAL_UART_RxCpltCallback>
}
 8006e00:	e007      	b.n	8006e12 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699a      	ldr	r2, [r3, #24]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0208 	orr.w	r2, r2, #8
 8006e10:	619a      	str	r2, [r3, #24]
}
 8006e12:	bf00      	nop
 8006e14:	3758      	adds	r7, #88	; 0x58
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b096      	sub	sp, #88	; 0x58
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e32:	2b22      	cmp	r3, #34	; 0x22
 8006e34:	f040 8098 	bne.w	8006f68 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e48:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006e4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e50:	4013      	ands	r3, r2
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e56:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d17b      	bne.n	8006f78 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e6      	bne.n	8006e80 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d12e      	bne.n	8006f60 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f023 0310 	bic.w	r3, r3, #16
 8006f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f26:	61bb      	str	r3, [r7, #24]
 8006f28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6979      	ldr	r1, [r7, #20]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	613b      	str	r3, [r7, #16]
   return(result);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e6      	bne.n	8006f08 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d103      	bne.n	8006f50 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2210      	movs	r2, #16
 8006f4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff f931 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f5e:	e00b      	b.n	8006f78 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7f9 fcd1 	bl	8000908 <HAL_UART_RxCpltCallback>
}
 8006f66:	e007      	b.n	8006f78 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0208 	orr.w	r2, r2, #8
 8006f76:	619a      	str	r2, [r3, #24]
}
 8006f78:	bf00      	nop
 8006f7a:	3758      	adds	r7, #88	; 0x58
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f80:	b084      	sub	sp, #16
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	f107 001c 	add.w	r0, r7, #28
 8006f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d120      	bne.n	8006fda <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	4b20      	ldr	r3, [pc, #128]	; (800702c <USB_CoreInit+0xac>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d105      	bne.n	8006fce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa96 	bl	8007500 <USB_CoreReset>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
 8006fd8:	e010      	b.n	8006ffc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa8a 	bl	8007500 <USB_CoreReset>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d10b      	bne.n	800701a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f043 0206 	orr.w	r2, r3, #6
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f043 0220 	orr.w	r2, r3, #32
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007026:	b004      	add	sp, #16
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	ffbdffbf 	.word	0xffbdffbf

08007030 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f023 0201 	bic.w	r2, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d115      	bne.n	80070a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007080:	2001      	movs	r0, #1
 8007082:	f7fa fc83 	bl	800198c <HAL_Delay>
      ms++;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3301      	adds	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fa29 	bl	80074e4 <USB_GetMode>
 8007092:	4603      	mov	r3, r0
 8007094:	2b01      	cmp	r3, #1
 8007096:	d01e      	beq.n	80070d6 <USB_SetCurrentMode+0x84>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b31      	cmp	r3, #49	; 0x31
 800709c:	d9f0      	bls.n	8007080 <USB_SetCurrentMode+0x2e>
 800709e:	e01a      	b.n	80070d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d115      	bne.n	80070d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070b2:	2001      	movs	r0, #1
 80070b4:	f7fa fc6a 	bl	800198c <HAL_Delay>
      ms++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa10 	bl	80074e4 <USB_GetMode>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <USB_SetCurrentMode+0x84>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b31      	cmp	r3, #49	; 0x31
 80070ce:	d9f0      	bls.n	80070b2 <USB_SetCurrentMode+0x60>
 80070d0:	e001      	b.n	80070d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e005      	b.n	80070e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b32      	cmp	r3, #50	; 0x32
 80070da:	d101      	bne.n	80070e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070ec:	b084      	sub	sp, #16
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007106:	2300      	movs	r3, #0
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	e009      	b.n	8007120 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3340      	adds	r3, #64	; 0x40
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	2200      	movs	r2, #0
 8007118:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	3301      	adds	r3, #1
 800711e:	613b      	str	r3, [r7, #16]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b0e      	cmp	r3, #14
 8007124:	d9f2      	bls.n	800710c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11c      	bne.n	8007166 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713a:	f043 0302 	orr.w	r3, r3, #2
 800713e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e005      	b.n	8007172 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007178:	461a      	mov	r2, r3
 800717a:	2300      	movs	r3, #0
 800717c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007184:	4619      	mov	r1, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718c:	461a      	mov	r2, r3
 800718e:	680b      	ldr	r3, [r1, #0]
 8007190:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	2b01      	cmp	r3, #1
 8007196:	d10c      	bne.n	80071b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d104      	bne.n	80071a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800719e:	2100      	movs	r1, #0
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f965 	bl	8007470 <USB_SetDevSpeed>
 80071a6:	e008      	b.n	80071ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071a8:	2101      	movs	r1, #1
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f960 	bl	8007470 <USB_SetDevSpeed>
 80071b0:	e003      	b.n	80071ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071b2:	2103      	movs	r1, #3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f95b 	bl	8007470 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071ba:	2110      	movs	r1, #16
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f8f3 	bl	80073a8 <USB_FlushTxFifo>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f91f 	bl	8007410 <USB_FlushRxFifo>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e2:	461a      	mov	r2, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	461a      	mov	r2, r3
 80071f0:	2300      	movs	r3, #0
 80071f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fa:	461a      	mov	r2, r3
 80071fc:	2300      	movs	r3, #0
 80071fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007200:	2300      	movs	r3, #0
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	e043      	b.n	800728e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800721c:	d118      	bne.n	8007250 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	461a      	mov	r2, r3
 8007232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	e013      	b.n	8007262 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007246:	461a      	mov	r2, r3
 8007248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	e008      	b.n	8007262 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725c:	461a      	mov	r2, r3
 800725e:	2300      	movs	r3, #0
 8007260:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726e:	461a      	mov	r2, r3
 8007270:	2300      	movs	r3, #0
 8007272:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	461a      	mov	r2, r3
 8007282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	3301      	adds	r3, #1
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	429a      	cmp	r2, r3
 8007294:	d3b7      	bcc.n	8007206 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	e043      	b.n	8007324 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072b2:	d118      	bne.n	80072e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	461a      	mov	r2, r3
 80072c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	e013      	b.n	80072f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072dc:	461a      	mov	r2, r3
 80072de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	e008      	b.n	80072f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	461a      	mov	r2, r3
 80072f4:	2300      	movs	r3, #0
 80072f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007304:	461a      	mov	r2, r3
 8007306:	2300      	movs	r3, #0
 8007308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800731c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	429a      	cmp	r2, r3
 800732a:	d3b7      	bcc.n	800729c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800733a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800733e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800734c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	f043 0210 	orr.w	r2, r3, #16
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <USB_DevInit+0x2b4>)
 8007366:	4313      	orrs	r3, r2
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800736c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f043 0208 	orr.w	r2, r3, #8
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800737e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d105      	bne.n	8007390 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699a      	ldr	r2, [r3, #24]
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <USB_DevInit+0x2b8>)
 800738a:	4313      	orrs	r3, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007390:	7dfb      	ldrb	r3, [r7, #23]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800739c:	b004      	add	sp, #16
 800739e:	4770      	bx	lr
 80073a0:	803c3800 	.word	0x803c3800
 80073a4:	40000004 	.word	0x40000004

080073a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4a13      	ldr	r2, [pc, #76]	; (800740c <USB_FlushTxFifo+0x64>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d901      	bls.n	80073c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e01b      	b.n	8007400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	daf2      	bge.n	80073b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	019b      	lsls	r3, r3, #6
 80073d8:	f043 0220 	orr.w	r2, r3, #32
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4a08      	ldr	r2, [pc, #32]	; (800740c <USB_FlushTxFifo+0x64>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d901      	bls.n	80073f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e006      	b.n	8007400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d0f0      	beq.n	80073e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	00030d40 	.word	0x00030d40

08007410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3301      	adds	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4a11      	ldr	r2, [pc, #68]	; (800746c <USB_FlushRxFifo+0x5c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d901      	bls.n	800742e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e018      	b.n	8007460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	daf2      	bge.n	800741c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2210      	movs	r2, #16
 800743e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3301      	adds	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4a08      	ldr	r2, [pc, #32]	; (800746c <USB_FlushRxFifo+0x5c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e006      	b.n	8007460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0310 	and.w	r3, r3, #16
 800745a:	2b10      	cmp	r3, #16
 800745c:	d0f0      	beq.n	8007440 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	00030d40 	.word	0x00030d40

08007470 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007490:	4313      	orrs	r3, r2
 8007492:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074bc:	f023 0303 	bic.w	r3, r3, #3
 80074c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074d0:	f043 0302 	orr.w	r3, r3, #2
 80074d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f003 0301 	and.w	r3, r3, #1
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4a13      	ldr	r2, [pc, #76]	; (8007564 <USB_CoreReset+0x64>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e01b      	b.n	8007556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	daf2      	bge.n	800750c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f043 0201 	orr.w	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3301      	adds	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <USB_CoreReset+0x64>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d901      	bls.n	8007548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e006      	b.n	8007556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	d0f0      	beq.n	8007536 <USB_CoreReset+0x36>

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	00030d40 	.word	0x00030d40

08007568 <siprintf>:
 8007568:	b40e      	push	{r1, r2, r3}
 800756a:	b500      	push	{lr}
 800756c:	b09c      	sub	sp, #112	; 0x70
 800756e:	ab1d      	add	r3, sp, #116	; 0x74
 8007570:	9002      	str	r0, [sp, #8]
 8007572:	9006      	str	r0, [sp, #24]
 8007574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007578:	4809      	ldr	r0, [pc, #36]	; (80075a0 <siprintf+0x38>)
 800757a:	9107      	str	r1, [sp, #28]
 800757c:	9104      	str	r1, [sp, #16]
 800757e:	4909      	ldr	r1, [pc, #36]	; (80075a4 <siprintf+0x3c>)
 8007580:	f853 2b04 	ldr.w	r2, [r3], #4
 8007584:	9105      	str	r1, [sp, #20]
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	a902      	add	r1, sp, #8
 800758c:	f000 f992 	bl	80078b4 <_svfiprintf_r>
 8007590:	9b02      	ldr	r3, [sp, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	b01c      	add	sp, #112	; 0x70
 8007598:	f85d eb04 	ldr.w	lr, [sp], #4
 800759c:	b003      	add	sp, #12
 800759e:	4770      	bx	lr
 80075a0:	2000005c 	.word	0x2000005c
 80075a4:	ffff0208 	.word	0xffff0208

080075a8 <memset>:
 80075a8:	4402      	add	r2, r0
 80075aa:	4603      	mov	r3, r0
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d100      	bne.n	80075b2 <memset+0xa>
 80075b0:	4770      	bx	lr
 80075b2:	f803 1b01 	strb.w	r1, [r3], #1
 80075b6:	e7f9      	b.n	80075ac <memset+0x4>

080075b8 <__errno>:
 80075b8:	4b01      	ldr	r3, [pc, #4]	; (80075c0 <__errno+0x8>)
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	2000005c 	.word	0x2000005c

080075c4 <__libc_init_array>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4d0d      	ldr	r5, [pc, #52]	; (80075fc <__libc_init_array+0x38>)
 80075c8:	4c0d      	ldr	r4, [pc, #52]	; (8007600 <__libc_init_array+0x3c>)
 80075ca:	1b64      	subs	r4, r4, r5
 80075cc:	10a4      	asrs	r4, r4, #2
 80075ce:	2600      	movs	r6, #0
 80075d0:	42a6      	cmp	r6, r4
 80075d2:	d109      	bne.n	80075e8 <__libc_init_array+0x24>
 80075d4:	4d0b      	ldr	r5, [pc, #44]	; (8007604 <__libc_init_array+0x40>)
 80075d6:	4c0c      	ldr	r4, [pc, #48]	; (8007608 <__libc_init_array+0x44>)
 80075d8:	f000 fc6a 	bl	8007eb0 <_init>
 80075dc:	1b64      	subs	r4, r4, r5
 80075de:	10a4      	asrs	r4, r4, #2
 80075e0:	2600      	movs	r6, #0
 80075e2:	42a6      	cmp	r6, r4
 80075e4:	d105      	bne.n	80075f2 <__libc_init_array+0x2e>
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ec:	4798      	blx	r3
 80075ee:	3601      	adds	r6, #1
 80075f0:	e7ee      	b.n	80075d0 <__libc_init_array+0xc>
 80075f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f6:	4798      	blx	r3
 80075f8:	3601      	adds	r6, #1
 80075fa:	e7f2      	b.n	80075e2 <__libc_init_array+0x1e>
 80075fc:	08008020 	.word	0x08008020
 8007600:	08008020 	.word	0x08008020
 8007604:	08008020 	.word	0x08008020
 8007608:	08008024 	.word	0x08008024

0800760c <__retarget_lock_acquire_recursive>:
 800760c:	4770      	bx	lr

0800760e <__retarget_lock_release_recursive>:
 800760e:	4770      	bx	lr

08007610 <_free_r>:
 8007610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007612:	2900      	cmp	r1, #0
 8007614:	d044      	beq.n	80076a0 <_free_r+0x90>
 8007616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800761a:	9001      	str	r0, [sp, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f1a1 0404 	sub.w	r4, r1, #4
 8007622:	bfb8      	it	lt
 8007624:	18e4      	addlt	r4, r4, r3
 8007626:	f000 f8df 	bl	80077e8 <__malloc_lock>
 800762a:	4a1e      	ldr	r2, [pc, #120]	; (80076a4 <_free_r+0x94>)
 800762c:	9801      	ldr	r0, [sp, #4]
 800762e:	6813      	ldr	r3, [r2, #0]
 8007630:	b933      	cbnz	r3, 8007640 <_free_r+0x30>
 8007632:	6063      	str	r3, [r4, #4]
 8007634:	6014      	str	r4, [r2, #0]
 8007636:	b003      	add	sp, #12
 8007638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800763c:	f000 b8da 	b.w	80077f4 <__malloc_unlock>
 8007640:	42a3      	cmp	r3, r4
 8007642:	d908      	bls.n	8007656 <_free_r+0x46>
 8007644:	6825      	ldr	r5, [r4, #0]
 8007646:	1961      	adds	r1, r4, r5
 8007648:	428b      	cmp	r3, r1
 800764a:	bf01      	itttt	eq
 800764c:	6819      	ldreq	r1, [r3, #0]
 800764e:	685b      	ldreq	r3, [r3, #4]
 8007650:	1949      	addeq	r1, r1, r5
 8007652:	6021      	streq	r1, [r4, #0]
 8007654:	e7ed      	b.n	8007632 <_free_r+0x22>
 8007656:	461a      	mov	r2, r3
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	b10b      	cbz	r3, 8007660 <_free_r+0x50>
 800765c:	42a3      	cmp	r3, r4
 800765e:	d9fa      	bls.n	8007656 <_free_r+0x46>
 8007660:	6811      	ldr	r1, [r2, #0]
 8007662:	1855      	adds	r5, r2, r1
 8007664:	42a5      	cmp	r5, r4
 8007666:	d10b      	bne.n	8007680 <_free_r+0x70>
 8007668:	6824      	ldr	r4, [r4, #0]
 800766a:	4421      	add	r1, r4
 800766c:	1854      	adds	r4, r2, r1
 800766e:	42a3      	cmp	r3, r4
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	d1e0      	bne.n	8007636 <_free_r+0x26>
 8007674:	681c      	ldr	r4, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	6053      	str	r3, [r2, #4]
 800767a:	440c      	add	r4, r1
 800767c:	6014      	str	r4, [r2, #0]
 800767e:	e7da      	b.n	8007636 <_free_r+0x26>
 8007680:	d902      	bls.n	8007688 <_free_r+0x78>
 8007682:	230c      	movs	r3, #12
 8007684:	6003      	str	r3, [r0, #0]
 8007686:	e7d6      	b.n	8007636 <_free_r+0x26>
 8007688:	6825      	ldr	r5, [r4, #0]
 800768a:	1961      	adds	r1, r4, r5
 800768c:	428b      	cmp	r3, r1
 800768e:	bf04      	itt	eq
 8007690:	6819      	ldreq	r1, [r3, #0]
 8007692:	685b      	ldreq	r3, [r3, #4]
 8007694:	6063      	str	r3, [r4, #4]
 8007696:	bf04      	itt	eq
 8007698:	1949      	addeq	r1, r1, r5
 800769a:	6021      	streq	r1, [r4, #0]
 800769c:	6054      	str	r4, [r2, #4]
 800769e:	e7ca      	b.n	8007636 <_free_r+0x26>
 80076a0:	b003      	add	sp, #12
 80076a2:	bd30      	pop	{r4, r5, pc}
 80076a4:	20000c24 	.word	0x20000c24

080076a8 <sbrk_aligned>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4e0e      	ldr	r6, [pc, #56]	; (80076e4 <sbrk_aligned+0x3c>)
 80076ac:	460c      	mov	r4, r1
 80076ae:	6831      	ldr	r1, [r6, #0]
 80076b0:	4605      	mov	r5, r0
 80076b2:	b911      	cbnz	r1, 80076ba <sbrk_aligned+0x12>
 80076b4:	f000 fba6 	bl	8007e04 <_sbrk_r>
 80076b8:	6030      	str	r0, [r6, #0]
 80076ba:	4621      	mov	r1, r4
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 fba1 	bl	8007e04 <_sbrk_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	d00a      	beq.n	80076dc <sbrk_aligned+0x34>
 80076c6:	1cc4      	adds	r4, r0, #3
 80076c8:	f024 0403 	bic.w	r4, r4, #3
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d007      	beq.n	80076e0 <sbrk_aligned+0x38>
 80076d0:	1a21      	subs	r1, r4, r0
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 fb96 	bl	8007e04 <_sbrk_r>
 80076d8:	3001      	adds	r0, #1
 80076da:	d101      	bne.n	80076e0 <sbrk_aligned+0x38>
 80076dc:	f04f 34ff 	mov.w	r4, #4294967295
 80076e0:	4620      	mov	r0, r4
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	20000c28 	.word	0x20000c28

080076e8 <_malloc_r>:
 80076e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ec:	1ccd      	adds	r5, r1, #3
 80076ee:	f025 0503 	bic.w	r5, r5, #3
 80076f2:	3508      	adds	r5, #8
 80076f4:	2d0c      	cmp	r5, #12
 80076f6:	bf38      	it	cc
 80076f8:	250c      	movcc	r5, #12
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	4607      	mov	r7, r0
 80076fe:	db01      	blt.n	8007704 <_malloc_r+0x1c>
 8007700:	42a9      	cmp	r1, r5
 8007702:	d905      	bls.n	8007710 <_malloc_r+0x28>
 8007704:	230c      	movs	r3, #12
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	2600      	movs	r6, #0
 800770a:	4630      	mov	r0, r6
 800770c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077e4 <_malloc_r+0xfc>
 8007714:	f000 f868 	bl	80077e8 <__malloc_lock>
 8007718:	f8d8 3000 	ldr.w	r3, [r8]
 800771c:	461c      	mov	r4, r3
 800771e:	bb5c      	cbnz	r4, 8007778 <_malloc_r+0x90>
 8007720:	4629      	mov	r1, r5
 8007722:	4638      	mov	r0, r7
 8007724:	f7ff ffc0 	bl	80076a8 <sbrk_aligned>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	4604      	mov	r4, r0
 800772c:	d155      	bne.n	80077da <_malloc_r+0xf2>
 800772e:	f8d8 4000 	ldr.w	r4, [r8]
 8007732:	4626      	mov	r6, r4
 8007734:	2e00      	cmp	r6, #0
 8007736:	d145      	bne.n	80077c4 <_malloc_r+0xdc>
 8007738:	2c00      	cmp	r4, #0
 800773a:	d048      	beq.n	80077ce <_malloc_r+0xe6>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	4631      	mov	r1, r6
 8007740:	4638      	mov	r0, r7
 8007742:	eb04 0903 	add.w	r9, r4, r3
 8007746:	f000 fb5d 	bl	8007e04 <_sbrk_r>
 800774a:	4581      	cmp	r9, r0
 800774c:	d13f      	bne.n	80077ce <_malloc_r+0xe6>
 800774e:	6821      	ldr	r1, [r4, #0]
 8007750:	1a6d      	subs	r5, r5, r1
 8007752:	4629      	mov	r1, r5
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff ffa7 	bl	80076a8 <sbrk_aligned>
 800775a:	3001      	adds	r0, #1
 800775c:	d037      	beq.n	80077ce <_malloc_r+0xe6>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	442b      	add	r3, r5
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	f8d8 3000 	ldr.w	r3, [r8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d038      	beq.n	80077de <_malloc_r+0xf6>
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	42a2      	cmp	r2, r4
 8007770:	d12b      	bne.n	80077ca <_malloc_r+0xe2>
 8007772:	2200      	movs	r2, #0
 8007774:	605a      	str	r2, [r3, #4]
 8007776:	e00f      	b.n	8007798 <_malloc_r+0xb0>
 8007778:	6822      	ldr	r2, [r4, #0]
 800777a:	1b52      	subs	r2, r2, r5
 800777c:	d41f      	bmi.n	80077be <_malloc_r+0xd6>
 800777e:	2a0b      	cmp	r2, #11
 8007780:	d917      	bls.n	80077b2 <_malloc_r+0xca>
 8007782:	1961      	adds	r1, r4, r5
 8007784:	42a3      	cmp	r3, r4
 8007786:	6025      	str	r5, [r4, #0]
 8007788:	bf18      	it	ne
 800778a:	6059      	strne	r1, [r3, #4]
 800778c:	6863      	ldr	r3, [r4, #4]
 800778e:	bf08      	it	eq
 8007790:	f8c8 1000 	streq.w	r1, [r8]
 8007794:	5162      	str	r2, [r4, r5]
 8007796:	604b      	str	r3, [r1, #4]
 8007798:	4638      	mov	r0, r7
 800779a:	f104 060b 	add.w	r6, r4, #11
 800779e:	f000 f829 	bl	80077f4 <__malloc_unlock>
 80077a2:	f026 0607 	bic.w	r6, r6, #7
 80077a6:	1d23      	adds	r3, r4, #4
 80077a8:	1af2      	subs	r2, r6, r3
 80077aa:	d0ae      	beq.n	800770a <_malloc_r+0x22>
 80077ac:	1b9b      	subs	r3, r3, r6
 80077ae:	50a3      	str	r3, [r4, r2]
 80077b0:	e7ab      	b.n	800770a <_malloc_r+0x22>
 80077b2:	42a3      	cmp	r3, r4
 80077b4:	6862      	ldr	r2, [r4, #4]
 80077b6:	d1dd      	bne.n	8007774 <_malloc_r+0x8c>
 80077b8:	f8c8 2000 	str.w	r2, [r8]
 80077bc:	e7ec      	b.n	8007798 <_malloc_r+0xb0>
 80077be:	4623      	mov	r3, r4
 80077c0:	6864      	ldr	r4, [r4, #4]
 80077c2:	e7ac      	b.n	800771e <_malloc_r+0x36>
 80077c4:	4634      	mov	r4, r6
 80077c6:	6876      	ldr	r6, [r6, #4]
 80077c8:	e7b4      	b.n	8007734 <_malloc_r+0x4c>
 80077ca:	4613      	mov	r3, r2
 80077cc:	e7cc      	b.n	8007768 <_malloc_r+0x80>
 80077ce:	230c      	movs	r3, #12
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	4638      	mov	r0, r7
 80077d4:	f000 f80e 	bl	80077f4 <__malloc_unlock>
 80077d8:	e797      	b.n	800770a <_malloc_r+0x22>
 80077da:	6025      	str	r5, [r4, #0]
 80077dc:	e7dc      	b.n	8007798 <_malloc_r+0xb0>
 80077de:	605b      	str	r3, [r3, #4]
 80077e0:	deff      	udf	#255	; 0xff
 80077e2:	bf00      	nop
 80077e4:	20000c24 	.word	0x20000c24

080077e8 <__malloc_lock>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__malloc_lock+0x8>)
 80077ea:	f7ff bf0f 	b.w	800760c <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	20000c20 	.word	0x20000c20

080077f4 <__malloc_unlock>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__malloc_unlock+0x8>)
 80077f6:	f7ff bf0a 	b.w	800760e <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000c20 	.word	0x20000c20

08007800 <__ssputs_r>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	688e      	ldr	r6, [r1, #8]
 8007806:	461f      	mov	r7, r3
 8007808:	42be      	cmp	r6, r7
 800780a:	680b      	ldr	r3, [r1, #0]
 800780c:	4682      	mov	sl, r0
 800780e:	460c      	mov	r4, r1
 8007810:	4690      	mov	r8, r2
 8007812:	d82c      	bhi.n	800786e <__ssputs_r+0x6e>
 8007814:	898a      	ldrh	r2, [r1, #12]
 8007816:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800781a:	d026      	beq.n	800786a <__ssputs_r+0x6a>
 800781c:	6965      	ldr	r5, [r4, #20]
 800781e:	6909      	ldr	r1, [r1, #16]
 8007820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007824:	eba3 0901 	sub.w	r9, r3, r1
 8007828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800782c:	1c7b      	adds	r3, r7, #1
 800782e:	444b      	add	r3, r9
 8007830:	106d      	asrs	r5, r5, #1
 8007832:	429d      	cmp	r5, r3
 8007834:	bf38      	it	cc
 8007836:	461d      	movcc	r5, r3
 8007838:	0553      	lsls	r3, r2, #21
 800783a:	d527      	bpl.n	800788c <__ssputs_r+0x8c>
 800783c:	4629      	mov	r1, r5
 800783e:	f7ff ff53 	bl	80076e8 <_malloc_r>
 8007842:	4606      	mov	r6, r0
 8007844:	b360      	cbz	r0, 80078a0 <__ssputs_r+0xa0>
 8007846:	6921      	ldr	r1, [r4, #16]
 8007848:	464a      	mov	r2, r9
 800784a:	f000 faeb 	bl	8007e24 <memcpy>
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007858:	81a3      	strh	r3, [r4, #12]
 800785a:	6126      	str	r6, [r4, #16]
 800785c:	6165      	str	r5, [r4, #20]
 800785e:	444e      	add	r6, r9
 8007860:	eba5 0509 	sub.w	r5, r5, r9
 8007864:	6026      	str	r6, [r4, #0]
 8007866:	60a5      	str	r5, [r4, #8]
 8007868:	463e      	mov	r6, r7
 800786a:	42be      	cmp	r6, r7
 800786c:	d900      	bls.n	8007870 <__ssputs_r+0x70>
 800786e:	463e      	mov	r6, r7
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	4632      	mov	r2, r6
 8007874:	4641      	mov	r1, r8
 8007876:	f000 faab 	bl	8007dd0 <memmove>
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	1b9b      	subs	r3, r3, r6
 800787e:	60a3      	str	r3, [r4, #8]
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	4433      	add	r3, r6
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	2000      	movs	r0, #0
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788c:	462a      	mov	r2, r5
 800788e:	f000 fad7 	bl	8007e40 <_realloc_r>
 8007892:	4606      	mov	r6, r0
 8007894:	2800      	cmp	r0, #0
 8007896:	d1e0      	bne.n	800785a <__ssputs_r+0x5a>
 8007898:	6921      	ldr	r1, [r4, #16]
 800789a:	4650      	mov	r0, sl
 800789c:	f7ff feb8 	bl	8007610 <_free_r>
 80078a0:	230c      	movs	r3, #12
 80078a2:	f8ca 3000 	str.w	r3, [sl]
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	e7e9      	b.n	8007888 <__ssputs_r+0x88>

080078b4 <_svfiprintf_r>:
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	4698      	mov	r8, r3
 80078ba:	898b      	ldrh	r3, [r1, #12]
 80078bc:	061b      	lsls	r3, r3, #24
 80078be:	b09d      	sub	sp, #116	; 0x74
 80078c0:	4607      	mov	r7, r0
 80078c2:	460d      	mov	r5, r1
 80078c4:	4614      	mov	r4, r2
 80078c6:	d50e      	bpl.n	80078e6 <_svfiprintf_r+0x32>
 80078c8:	690b      	ldr	r3, [r1, #16]
 80078ca:	b963      	cbnz	r3, 80078e6 <_svfiprintf_r+0x32>
 80078cc:	2140      	movs	r1, #64	; 0x40
 80078ce:	f7ff ff0b 	bl	80076e8 <_malloc_r>
 80078d2:	6028      	str	r0, [r5, #0]
 80078d4:	6128      	str	r0, [r5, #16]
 80078d6:	b920      	cbnz	r0, 80078e2 <_svfiprintf_r+0x2e>
 80078d8:	230c      	movs	r3, #12
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	e0d0      	b.n	8007a84 <_svfiprintf_r+0x1d0>
 80078e2:	2340      	movs	r3, #64	; 0x40
 80078e4:	616b      	str	r3, [r5, #20]
 80078e6:	2300      	movs	r3, #0
 80078e8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ea:	2320      	movs	r3, #32
 80078ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f4:	2330      	movs	r3, #48	; 0x30
 80078f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a9c <_svfiprintf_r+0x1e8>
 80078fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078fe:	f04f 0901 	mov.w	r9, #1
 8007902:	4623      	mov	r3, r4
 8007904:	469a      	mov	sl, r3
 8007906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800790a:	b10a      	cbz	r2, 8007910 <_svfiprintf_r+0x5c>
 800790c:	2a25      	cmp	r2, #37	; 0x25
 800790e:	d1f9      	bne.n	8007904 <_svfiprintf_r+0x50>
 8007910:	ebba 0b04 	subs.w	fp, sl, r4
 8007914:	d00b      	beq.n	800792e <_svfiprintf_r+0x7a>
 8007916:	465b      	mov	r3, fp
 8007918:	4622      	mov	r2, r4
 800791a:	4629      	mov	r1, r5
 800791c:	4638      	mov	r0, r7
 800791e:	f7ff ff6f 	bl	8007800 <__ssputs_r>
 8007922:	3001      	adds	r0, #1
 8007924:	f000 80a9 	beq.w	8007a7a <_svfiprintf_r+0x1c6>
 8007928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800792a:	445a      	add	r2, fp
 800792c:	9209      	str	r2, [sp, #36]	; 0x24
 800792e:	f89a 3000 	ldrb.w	r3, [sl]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80a1 	beq.w	8007a7a <_svfiprintf_r+0x1c6>
 8007938:	2300      	movs	r3, #0
 800793a:	f04f 32ff 	mov.w	r2, #4294967295
 800793e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007942:	f10a 0a01 	add.w	sl, sl, #1
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	9307      	str	r3, [sp, #28]
 800794a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800794e:	931a      	str	r3, [sp, #104]	; 0x68
 8007950:	4654      	mov	r4, sl
 8007952:	2205      	movs	r2, #5
 8007954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007958:	4850      	ldr	r0, [pc, #320]	; (8007a9c <_svfiprintf_r+0x1e8>)
 800795a:	f7f8 fc61 	bl	8000220 <memchr>
 800795e:	9a04      	ldr	r2, [sp, #16]
 8007960:	b9d8      	cbnz	r0, 800799a <_svfiprintf_r+0xe6>
 8007962:	06d0      	lsls	r0, r2, #27
 8007964:	bf44      	itt	mi
 8007966:	2320      	movmi	r3, #32
 8007968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800796c:	0711      	lsls	r1, r2, #28
 800796e:	bf44      	itt	mi
 8007970:	232b      	movmi	r3, #43	; 0x2b
 8007972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007976:	f89a 3000 	ldrb.w	r3, [sl]
 800797a:	2b2a      	cmp	r3, #42	; 0x2a
 800797c:	d015      	beq.n	80079aa <_svfiprintf_r+0xf6>
 800797e:	9a07      	ldr	r2, [sp, #28]
 8007980:	4654      	mov	r4, sl
 8007982:	2000      	movs	r0, #0
 8007984:	f04f 0c0a 	mov.w	ip, #10
 8007988:	4621      	mov	r1, r4
 800798a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798e:	3b30      	subs	r3, #48	; 0x30
 8007990:	2b09      	cmp	r3, #9
 8007992:	d94d      	bls.n	8007a30 <_svfiprintf_r+0x17c>
 8007994:	b1b0      	cbz	r0, 80079c4 <_svfiprintf_r+0x110>
 8007996:	9207      	str	r2, [sp, #28]
 8007998:	e014      	b.n	80079c4 <_svfiprintf_r+0x110>
 800799a:	eba0 0308 	sub.w	r3, r0, r8
 800799e:	fa09 f303 	lsl.w	r3, r9, r3
 80079a2:	4313      	orrs	r3, r2
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	46a2      	mov	sl, r4
 80079a8:	e7d2      	b.n	8007950 <_svfiprintf_r+0x9c>
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	1d19      	adds	r1, r3, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	9103      	str	r1, [sp, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bfbb      	ittet	lt
 80079b6:	425b      	neglt	r3, r3
 80079b8:	f042 0202 	orrlt.w	r2, r2, #2
 80079bc:	9307      	strge	r3, [sp, #28]
 80079be:	9307      	strlt	r3, [sp, #28]
 80079c0:	bfb8      	it	lt
 80079c2:	9204      	strlt	r2, [sp, #16]
 80079c4:	7823      	ldrb	r3, [r4, #0]
 80079c6:	2b2e      	cmp	r3, #46	; 0x2e
 80079c8:	d10c      	bne.n	80079e4 <_svfiprintf_r+0x130>
 80079ca:	7863      	ldrb	r3, [r4, #1]
 80079cc:	2b2a      	cmp	r3, #42	; 0x2a
 80079ce:	d134      	bne.n	8007a3a <_svfiprintf_r+0x186>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	1d1a      	adds	r2, r3, #4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	9203      	str	r2, [sp, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bfb8      	it	lt
 80079dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e0:	3402      	adds	r4, #2
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007aac <_svfiprintf_r+0x1f8>
 80079e8:	7821      	ldrb	r1, [r4, #0]
 80079ea:	2203      	movs	r2, #3
 80079ec:	4650      	mov	r0, sl
 80079ee:	f7f8 fc17 	bl	8000220 <memchr>
 80079f2:	b138      	cbz	r0, 8007a04 <_svfiprintf_r+0x150>
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	eba0 000a 	sub.w	r0, r0, sl
 80079fa:	2240      	movs	r2, #64	; 0x40
 80079fc:	4082      	lsls	r2, r0
 80079fe:	4313      	orrs	r3, r2
 8007a00:	3401      	adds	r4, #1
 8007a02:	9304      	str	r3, [sp, #16]
 8007a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a08:	4825      	ldr	r0, [pc, #148]	; (8007aa0 <_svfiprintf_r+0x1ec>)
 8007a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a0e:	2206      	movs	r2, #6
 8007a10:	f7f8 fc06 	bl	8000220 <memchr>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d038      	beq.n	8007a8a <_svfiprintf_r+0x1d6>
 8007a18:	4b22      	ldr	r3, [pc, #136]	; (8007aa4 <_svfiprintf_r+0x1f0>)
 8007a1a:	bb1b      	cbnz	r3, 8007a64 <_svfiprintf_r+0x1b0>
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	3307      	adds	r3, #7
 8007a20:	f023 0307 	bic.w	r3, r3, #7
 8007a24:	3308      	adds	r3, #8
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2a:	4433      	add	r3, r6
 8007a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2e:	e768      	b.n	8007902 <_svfiprintf_r+0x4e>
 8007a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a34:	460c      	mov	r4, r1
 8007a36:	2001      	movs	r0, #1
 8007a38:	e7a6      	b.n	8007988 <_svfiprintf_r+0xd4>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	3401      	adds	r4, #1
 8007a3e:	9305      	str	r3, [sp, #20]
 8007a40:	4619      	mov	r1, r3
 8007a42:	f04f 0c0a 	mov.w	ip, #10
 8007a46:	4620      	mov	r0, r4
 8007a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a4c:	3a30      	subs	r2, #48	; 0x30
 8007a4e:	2a09      	cmp	r2, #9
 8007a50:	d903      	bls.n	8007a5a <_svfiprintf_r+0x1a6>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0c6      	beq.n	80079e4 <_svfiprintf_r+0x130>
 8007a56:	9105      	str	r1, [sp, #20]
 8007a58:	e7c4      	b.n	80079e4 <_svfiprintf_r+0x130>
 8007a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a5e:	4604      	mov	r4, r0
 8007a60:	2301      	movs	r3, #1
 8007a62:	e7f0      	b.n	8007a46 <_svfiprintf_r+0x192>
 8007a64:	ab03      	add	r3, sp, #12
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	462a      	mov	r2, r5
 8007a6a:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <_svfiprintf_r+0x1f4>)
 8007a6c:	a904      	add	r1, sp, #16
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f3af 8000 	nop.w
 8007a74:	1c42      	adds	r2, r0, #1
 8007a76:	4606      	mov	r6, r0
 8007a78:	d1d6      	bne.n	8007a28 <_svfiprintf_r+0x174>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	065b      	lsls	r3, r3, #25
 8007a7e:	f53f af2d 	bmi.w	80078dc <_svfiprintf_r+0x28>
 8007a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a84:	b01d      	add	sp, #116	; 0x74
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	ab03      	add	r3, sp, #12
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <_svfiprintf_r+0x1f4>)
 8007a92:	a904      	add	r1, sp, #16
 8007a94:	4638      	mov	r0, r7
 8007a96:	f000 f879 	bl	8007b8c <_printf_i>
 8007a9a:	e7eb      	b.n	8007a74 <_svfiprintf_r+0x1c0>
 8007a9c:	08007fe4 	.word	0x08007fe4
 8007aa0:	08007fee 	.word	0x08007fee
 8007aa4:	00000000 	.word	0x00000000
 8007aa8:	08007801 	.word	0x08007801
 8007aac:	08007fea 	.word	0x08007fea

08007ab0 <_printf_common>:
 8007ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab4:	4616      	mov	r6, r2
 8007ab6:	4699      	mov	r9, r3
 8007ab8:	688a      	ldr	r2, [r1, #8]
 8007aba:	690b      	ldr	r3, [r1, #16]
 8007abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	bfb8      	it	lt
 8007ac4:	4613      	movlt	r3, r2
 8007ac6:	6033      	str	r3, [r6, #0]
 8007ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007acc:	4607      	mov	r7, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	b10a      	cbz	r2, 8007ad6 <_printf_common+0x26>
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	6033      	str	r3, [r6, #0]
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	0699      	lsls	r1, r3, #26
 8007ada:	bf42      	ittt	mi
 8007adc:	6833      	ldrmi	r3, [r6, #0]
 8007ade:	3302      	addmi	r3, #2
 8007ae0:	6033      	strmi	r3, [r6, #0]
 8007ae2:	6825      	ldr	r5, [r4, #0]
 8007ae4:	f015 0506 	ands.w	r5, r5, #6
 8007ae8:	d106      	bne.n	8007af8 <_printf_common+0x48>
 8007aea:	f104 0a19 	add.w	sl, r4, #25
 8007aee:	68e3      	ldr	r3, [r4, #12]
 8007af0:	6832      	ldr	r2, [r6, #0]
 8007af2:	1a9b      	subs	r3, r3, r2
 8007af4:	42ab      	cmp	r3, r5
 8007af6:	dc26      	bgt.n	8007b46 <_printf_common+0x96>
 8007af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007afc:	1e13      	subs	r3, r2, #0
 8007afe:	6822      	ldr	r2, [r4, #0]
 8007b00:	bf18      	it	ne
 8007b02:	2301      	movne	r3, #1
 8007b04:	0692      	lsls	r2, r2, #26
 8007b06:	d42b      	bmi.n	8007b60 <_printf_common+0xb0>
 8007b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	4638      	mov	r0, r7
 8007b10:	47c0      	blx	r8
 8007b12:	3001      	adds	r0, #1
 8007b14:	d01e      	beq.n	8007b54 <_printf_common+0xa4>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	6922      	ldr	r2, [r4, #16]
 8007b1a:	f003 0306 	and.w	r3, r3, #6
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	bf02      	ittt	eq
 8007b22:	68e5      	ldreq	r5, [r4, #12]
 8007b24:	6833      	ldreq	r3, [r6, #0]
 8007b26:	1aed      	subeq	r5, r5, r3
 8007b28:	68a3      	ldr	r3, [r4, #8]
 8007b2a:	bf0c      	ite	eq
 8007b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b30:	2500      	movne	r5, #0
 8007b32:	4293      	cmp	r3, r2
 8007b34:	bfc4      	itt	gt
 8007b36:	1a9b      	subgt	r3, r3, r2
 8007b38:	18ed      	addgt	r5, r5, r3
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	341a      	adds	r4, #26
 8007b3e:	42b5      	cmp	r5, r6
 8007b40:	d11a      	bne.n	8007b78 <_printf_common+0xc8>
 8007b42:	2000      	movs	r0, #0
 8007b44:	e008      	b.n	8007b58 <_printf_common+0xa8>
 8007b46:	2301      	movs	r3, #1
 8007b48:	4652      	mov	r2, sl
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	47c0      	blx	r8
 8007b50:	3001      	adds	r0, #1
 8007b52:	d103      	bne.n	8007b5c <_printf_common+0xac>
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	e7c6      	b.n	8007aee <_printf_common+0x3e>
 8007b60:	18e1      	adds	r1, r4, r3
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	2030      	movs	r0, #48	; 0x30
 8007b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b6a:	4422      	add	r2, r4
 8007b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b74:	3302      	adds	r3, #2
 8007b76:	e7c7      	b.n	8007b08 <_printf_common+0x58>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	4638      	mov	r0, r7
 8007b80:	47c0      	blx	r8
 8007b82:	3001      	adds	r0, #1
 8007b84:	d0e6      	beq.n	8007b54 <_printf_common+0xa4>
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7d9      	b.n	8007b3e <_printf_common+0x8e>
	...

08007b8c <_printf_i>:
 8007b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	7e0f      	ldrb	r7, [r1, #24]
 8007b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b94:	2f78      	cmp	r7, #120	; 0x78
 8007b96:	4691      	mov	r9, r2
 8007b98:	4680      	mov	r8, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	469a      	mov	sl, r3
 8007b9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ba2:	d807      	bhi.n	8007bb4 <_printf_i+0x28>
 8007ba4:	2f62      	cmp	r7, #98	; 0x62
 8007ba6:	d80a      	bhi.n	8007bbe <_printf_i+0x32>
 8007ba8:	2f00      	cmp	r7, #0
 8007baa:	f000 80d4 	beq.w	8007d56 <_printf_i+0x1ca>
 8007bae:	2f58      	cmp	r7, #88	; 0x58
 8007bb0:	f000 80c0 	beq.w	8007d34 <_printf_i+0x1a8>
 8007bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bbc:	e03a      	b.n	8007c34 <_printf_i+0xa8>
 8007bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bc2:	2b15      	cmp	r3, #21
 8007bc4:	d8f6      	bhi.n	8007bb4 <_printf_i+0x28>
 8007bc6:	a101      	add	r1, pc, #4	; (adr r1, 8007bcc <_printf_i+0x40>)
 8007bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bcc:	08007c25 	.word	0x08007c25
 8007bd0:	08007c39 	.word	0x08007c39
 8007bd4:	08007bb5 	.word	0x08007bb5
 8007bd8:	08007bb5 	.word	0x08007bb5
 8007bdc:	08007bb5 	.word	0x08007bb5
 8007be0:	08007bb5 	.word	0x08007bb5
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007bb5 	.word	0x08007bb5
 8007bec:	08007bb5 	.word	0x08007bb5
 8007bf0:	08007bb5 	.word	0x08007bb5
 8007bf4:	08007bb5 	.word	0x08007bb5
 8007bf8:	08007d3d 	.word	0x08007d3d
 8007bfc:	08007c65 	.word	0x08007c65
 8007c00:	08007cf7 	.word	0x08007cf7
 8007c04:	08007bb5 	.word	0x08007bb5
 8007c08:	08007bb5 	.word	0x08007bb5
 8007c0c:	08007d5f 	.word	0x08007d5f
 8007c10:	08007bb5 	.word	0x08007bb5
 8007c14:	08007c65 	.word	0x08007c65
 8007c18:	08007bb5 	.word	0x08007bb5
 8007c1c:	08007bb5 	.word	0x08007bb5
 8007c20:	08007cff 	.word	0x08007cff
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	1d1a      	adds	r2, r3, #4
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	602a      	str	r2, [r5, #0]
 8007c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c34:	2301      	movs	r3, #1
 8007c36:	e09f      	b.n	8007d78 <_printf_i+0x1ec>
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	0607      	lsls	r7, r0, #24
 8007c3e:	f103 0104 	add.w	r1, r3, #4
 8007c42:	6029      	str	r1, [r5, #0]
 8007c44:	d501      	bpl.n	8007c4a <_printf_i+0xbe>
 8007c46:	681e      	ldr	r6, [r3, #0]
 8007c48:	e003      	b.n	8007c52 <_printf_i+0xc6>
 8007c4a:	0646      	lsls	r6, r0, #25
 8007c4c:	d5fb      	bpl.n	8007c46 <_printf_i+0xba>
 8007c4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c52:	2e00      	cmp	r6, #0
 8007c54:	da03      	bge.n	8007c5e <_printf_i+0xd2>
 8007c56:	232d      	movs	r3, #45	; 0x2d
 8007c58:	4276      	negs	r6, r6
 8007c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5e:	485a      	ldr	r0, [pc, #360]	; (8007dc8 <_printf_i+0x23c>)
 8007c60:	230a      	movs	r3, #10
 8007c62:	e012      	b.n	8007c8a <_printf_i+0xfe>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	6820      	ldr	r0, [r4, #0]
 8007c68:	1d19      	adds	r1, r3, #4
 8007c6a:	6029      	str	r1, [r5, #0]
 8007c6c:	0605      	lsls	r5, r0, #24
 8007c6e:	d501      	bpl.n	8007c74 <_printf_i+0xe8>
 8007c70:	681e      	ldr	r6, [r3, #0]
 8007c72:	e002      	b.n	8007c7a <_printf_i+0xee>
 8007c74:	0641      	lsls	r1, r0, #25
 8007c76:	d5fb      	bpl.n	8007c70 <_printf_i+0xe4>
 8007c78:	881e      	ldrh	r6, [r3, #0]
 8007c7a:	4853      	ldr	r0, [pc, #332]	; (8007dc8 <_printf_i+0x23c>)
 8007c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c7e:	bf0c      	ite	eq
 8007c80:	2308      	moveq	r3, #8
 8007c82:	230a      	movne	r3, #10
 8007c84:	2100      	movs	r1, #0
 8007c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c8a:	6865      	ldr	r5, [r4, #4]
 8007c8c:	60a5      	str	r5, [r4, #8]
 8007c8e:	2d00      	cmp	r5, #0
 8007c90:	bfa2      	ittt	ge
 8007c92:	6821      	ldrge	r1, [r4, #0]
 8007c94:	f021 0104 	bicge.w	r1, r1, #4
 8007c98:	6021      	strge	r1, [r4, #0]
 8007c9a:	b90e      	cbnz	r6, 8007ca0 <_printf_i+0x114>
 8007c9c:	2d00      	cmp	r5, #0
 8007c9e:	d04b      	beq.n	8007d38 <_printf_i+0x1ac>
 8007ca0:	4615      	mov	r5, r2
 8007ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8007caa:	5dc7      	ldrb	r7, [r0, r7]
 8007cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cb0:	4637      	mov	r7, r6
 8007cb2:	42bb      	cmp	r3, r7
 8007cb4:	460e      	mov	r6, r1
 8007cb6:	d9f4      	bls.n	8007ca2 <_printf_i+0x116>
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d10b      	bne.n	8007cd4 <_printf_i+0x148>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	07de      	lsls	r6, r3, #31
 8007cc0:	d508      	bpl.n	8007cd4 <_printf_i+0x148>
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	6861      	ldr	r1, [r4, #4]
 8007cc6:	4299      	cmp	r1, r3
 8007cc8:	bfde      	ittt	le
 8007cca:	2330      	movle	r3, #48	; 0x30
 8007ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cd4:	1b52      	subs	r2, r2, r5
 8007cd6:	6122      	str	r2, [r4, #16]
 8007cd8:	f8cd a000 	str.w	sl, [sp]
 8007cdc:	464b      	mov	r3, r9
 8007cde:	aa03      	add	r2, sp, #12
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	f7ff fee4 	bl	8007ab0 <_printf_common>
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d14a      	bne.n	8007d82 <_printf_i+0x1f6>
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	b004      	add	sp, #16
 8007cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f043 0320 	orr.w	r3, r3, #32
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	4833      	ldr	r0, [pc, #204]	; (8007dcc <_printf_i+0x240>)
 8007d00:	2778      	movs	r7, #120	; 0x78
 8007d02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	6829      	ldr	r1, [r5, #0]
 8007d0a:	061f      	lsls	r7, r3, #24
 8007d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d10:	d402      	bmi.n	8007d18 <_printf_i+0x18c>
 8007d12:	065f      	lsls	r7, r3, #25
 8007d14:	bf48      	it	mi
 8007d16:	b2b6      	uxthmi	r6, r6
 8007d18:	07df      	lsls	r7, r3, #31
 8007d1a:	bf48      	it	mi
 8007d1c:	f043 0320 	orrmi.w	r3, r3, #32
 8007d20:	6029      	str	r1, [r5, #0]
 8007d22:	bf48      	it	mi
 8007d24:	6023      	strmi	r3, [r4, #0]
 8007d26:	b91e      	cbnz	r6, 8007d30 <_printf_i+0x1a4>
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	f023 0320 	bic.w	r3, r3, #32
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	2310      	movs	r3, #16
 8007d32:	e7a7      	b.n	8007c84 <_printf_i+0xf8>
 8007d34:	4824      	ldr	r0, [pc, #144]	; (8007dc8 <_printf_i+0x23c>)
 8007d36:	e7e4      	b.n	8007d02 <_printf_i+0x176>
 8007d38:	4615      	mov	r5, r2
 8007d3a:	e7bd      	b.n	8007cb8 <_printf_i+0x12c>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	6826      	ldr	r6, [r4, #0]
 8007d40:	6961      	ldr	r1, [r4, #20]
 8007d42:	1d18      	adds	r0, r3, #4
 8007d44:	6028      	str	r0, [r5, #0]
 8007d46:	0635      	lsls	r5, r6, #24
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	d501      	bpl.n	8007d50 <_printf_i+0x1c4>
 8007d4c:	6019      	str	r1, [r3, #0]
 8007d4e:	e002      	b.n	8007d56 <_printf_i+0x1ca>
 8007d50:	0670      	lsls	r0, r6, #25
 8007d52:	d5fb      	bpl.n	8007d4c <_printf_i+0x1c0>
 8007d54:	8019      	strh	r1, [r3, #0]
 8007d56:	2300      	movs	r3, #0
 8007d58:	6123      	str	r3, [r4, #16]
 8007d5a:	4615      	mov	r5, r2
 8007d5c:	e7bc      	b.n	8007cd8 <_printf_i+0x14c>
 8007d5e:	682b      	ldr	r3, [r5, #0]
 8007d60:	1d1a      	adds	r2, r3, #4
 8007d62:	602a      	str	r2, [r5, #0]
 8007d64:	681d      	ldr	r5, [r3, #0]
 8007d66:	6862      	ldr	r2, [r4, #4]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f7f8 fa58 	bl	8000220 <memchr>
 8007d70:	b108      	cbz	r0, 8007d76 <_printf_i+0x1ea>
 8007d72:	1b40      	subs	r0, r0, r5
 8007d74:	6060      	str	r0, [r4, #4]
 8007d76:	6863      	ldr	r3, [r4, #4]
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d80:	e7aa      	b.n	8007cd8 <_printf_i+0x14c>
 8007d82:	6923      	ldr	r3, [r4, #16]
 8007d84:	462a      	mov	r2, r5
 8007d86:	4649      	mov	r1, r9
 8007d88:	4640      	mov	r0, r8
 8007d8a:	47d0      	blx	sl
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d0ad      	beq.n	8007cec <_printf_i+0x160>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	079b      	lsls	r3, r3, #30
 8007d94:	d413      	bmi.n	8007dbe <_printf_i+0x232>
 8007d96:	68e0      	ldr	r0, [r4, #12]
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	4298      	cmp	r0, r3
 8007d9c:	bfb8      	it	lt
 8007d9e:	4618      	movlt	r0, r3
 8007da0:	e7a6      	b.n	8007cf0 <_printf_i+0x164>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4632      	mov	r2, r6
 8007da6:	4649      	mov	r1, r9
 8007da8:	4640      	mov	r0, r8
 8007daa:	47d0      	blx	sl
 8007dac:	3001      	adds	r0, #1
 8007dae:	d09d      	beq.n	8007cec <_printf_i+0x160>
 8007db0:	3501      	adds	r5, #1
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	9903      	ldr	r1, [sp, #12]
 8007db6:	1a5b      	subs	r3, r3, r1
 8007db8:	42ab      	cmp	r3, r5
 8007dba:	dcf2      	bgt.n	8007da2 <_printf_i+0x216>
 8007dbc:	e7eb      	b.n	8007d96 <_printf_i+0x20a>
 8007dbe:	2500      	movs	r5, #0
 8007dc0:	f104 0619 	add.w	r6, r4, #25
 8007dc4:	e7f5      	b.n	8007db2 <_printf_i+0x226>
 8007dc6:	bf00      	nop
 8007dc8:	08007ff5 	.word	0x08007ff5
 8007dcc:	08008006 	.word	0x08008006

08007dd0 <memmove>:
 8007dd0:	4288      	cmp	r0, r1
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	eb01 0402 	add.w	r4, r1, r2
 8007dd8:	d902      	bls.n	8007de0 <memmove+0x10>
 8007dda:	4284      	cmp	r4, r0
 8007ddc:	4623      	mov	r3, r4
 8007dde:	d807      	bhi.n	8007df0 <memmove+0x20>
 8007de0:	1e43      	subs	r3, r0, #1
 8007de2:	42a1      	cmp	r1, r4
 8007de4:	d008      	beq.n	8007df8 <memmove+0x28>
 8007de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dee:	e7f8      	b.n	8007de2 <memmove+0x12>
 8007df0:	4402      	add	r2, r0
 8007df2:	4601      	mov	r1, r0
 8007df4:	428a      	cmp	r2, r1
 8007df6:	d100      	bne.n	8007dfa <memmove+0x2a>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e02:	e7f7      	b.n	8007df4 <memmove+0x24>

08007e04 <_sbrk_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	4d06      	ldr	r5, [pc, #24]	; (8007e20 <_sbrk_r+0x1c>)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	602b      	str	r3, [r5, #0]
 8007e10:	f7f9 fcee 	bl	80017f0 <_sbrk>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_sbrk_r+0x1a>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_sbrk_r+0x1a>
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	20000c1c 	.word	0x20000c1c

08007e24 <memcpy>:
 8007e24:	440a      	add	r2, r1
 8007e26:	4291      	cmp	r1, r2
 8007e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e2c:	d100      	bne.n	8007e30 <memcpy+0xc>
 8007e2e:	4770      	bx	lr
 8007e30:	b510      	push	{r4, lr}
 8007e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	d1f9      	bne.n	8007e32 <memcpy+0xe>
 8007e3e:	bd10      	pop	{r4, pc}

08007e40 <_realloc_r>:
 8007e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e44:	4680      	mov	r8, r0
 8007e46:	4614      	mov	r4, r2
 8007e48:	460e      	mov	r6, r1
 8007e4a:	b921      	cbnz	r1, 8007e56 <_realloc_r+0x16>
 8007e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e50:	4611      	mov	r1, r2
 8007e52:	f7ff bc49 	b.w	80076e8 <_malloc_r>
 8007e56:	b92a      	cbnz	r2, 8007e64 <_realloc_r+0x24>
 8007e58:	f7ff fbda 	bl	8007610 <_free_r>
 8007e5c:	4625      	mov	r5, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e64:	f000 f81b 	bl	8007e9e <_malloc_usable_size_r>
 8007e68:	4284      	cmp	r4, r0
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	d802      	bhi.n	8007e74 <_realloc_r+0x34>
 8007e6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e72:	d812      	bhi.n	8007e9a <_realloc_r+0x5a>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff fc36 	bl	80076e8 <_malloc_r>
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d0ed      	beq.n	8007e5e <_realloc_r+0x1e>
 8007e82:	42bc      	cmp	r4, r7
 8007e84:	4622      	mov	r2, r4
 8007e86:	4631      	mov	r1, r6
 8007e88:	bf28      	it	cs
 8007e8a:	463a      	movcs	r2, r7
 8007e8c:	f7ff ffca 	bl	8007e24 <memcpy>
 8007e90:	4631      	mov	r1, r6
 8007e92:	4640      	mov	r0, r8
 8007e94:	f7ff fbbc 	bl	8007610 <_free_r>
 8007e98:	e7e1      	b.n	8007e5e <_realloc_r+0x1e>
 8007e9a:	4635      	mov	r5, r6
 8007e9c:	e7df      	b.n	8007e5e <_realloc_r+0x1e>

08007e9e <_malloc_usable_size_r>:
 8007e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea2:	1f18      	subs	r0, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bfbc      	itt	lt
 8007ea8:	580b      	ldrlt	r3, [r1, r0]
 8007eaa:	18c0      	addlt	r0, r0, r3
 8007eac:	4770      	bx	lr
	...

08007eb0 <_init>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr

08007ebc <_fini>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	bf00      	nop
 8007ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec2:	bc08      	pop	{r3}
 8007ec4:	469e      	mov	lr, r3
 8007ec6:	4770      	bx	lr
